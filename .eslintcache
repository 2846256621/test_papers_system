[{"F:\\Projects\\React学习\\test_paper_system\\src\\index.js":"1","F:\\Projects\\React学习\\test_paper_system\\src\\store\\reducers.js":"2","F:\\Projects\\React学习\\test_paper_system\\src\\App.jsx":"3","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actionType.js":"4","F:\\Projects\\React学习\\test_paper_system\\src\\routers\\route.jsx":"5","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\login\\index.jsx":"6","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\sign\\index.jsx":"7","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\home.jsx":"8","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemList.jsx":"9","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\subjects\\subjects.jsx":"10","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperList.jsx":"11","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperDetails.jsx":"12","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\points\\points.jsx":"13","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userPerson.jsx":"14","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions.js":"15","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userManage.jsx":"16","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemManage.jsx":"17","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperAutomatic.jsx":"18","F:\\Projects\\React学习\\test_paper_system\\src\\constants\\api.js":"19","F:\\Projects\\React学习\\test_paper_system\\src\\utils\\ajax.js":"20","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemSearch.jsx":"21","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\wrapComponent.jsx":"22","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\BaseForm.jsx":"23","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\RenderProblem.jsx":"24","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\nav\\index.jsx":"25","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\header\\index.jsx":"26","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\login.js":"27","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\points.js":"28","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\subjects.js":"29","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\user.js":"30","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\problems.js":"31","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\papers.js":"32"},{"size":590,"mtime":1610542394000,"results":"33","hashOfConfig":"34"},{"size":5324,"mtime":1618921418446,"results":"35","hashOfConfig":"34"},{"size":274,"mtime":1609841185000,"results":"36","hashOfConfig":"34"},{"size":663,"mtime":1618921412702,"results":"37","hashOfConfig":"34"},{"size":2191,"mtime":1610355099000,"results":"38","hashOfConfig":"34"},{"size":5631,"mtime":1615994152282,"results":"39","hashOfConfig":"34"},{"size":5767,"mtime":1610520394000,"results":"40","hashOfConfig":"34"},{"size":3869,"mtime":1616039547642,"results":"41","hashOfConfig":"34"},{"size":10989,"mtime":1618920745947,"results":"42","hashOfConfig":"34"},{"size":13441,"mtime":1618921072051,"results":"43","hashOfConfig":"34"},{"size":12761,"mtime":1618921328587,"results":"44","hashOfConfig":"34"},{"size":9775,"mtime":1618919294766,"results":"45","hashOfConfig":"34"},{"size":18443,"mtime":1618921081164,"results":"46","hashOfConfig":"34"},{"size":8575,"mtime":1618485862097,"results":"47","hashOfConfig":"34"},{"size":2961,"mtime":1610464965716,"results":"48","hashOfConfig":"34"},{"size":12843,"mtime":1616582856479,"results":"49","hashOfConfig":"34"},{"size":29875,"mtime":1618298681309,"results":"50","hashOfConfig":"34"},{"size":19286,"mtime":1618919237634,"results":"51","hashOfConfig":"34"},{"size":1475,"mtime":1618912457080,"results":"52","hashOfConfig":"34"},{"size":1934,"mtime":1610187595000,"results":"53","hashOfConfig":"34"},{"size":9802,"mtime":1618298492929,"results":"54","hashOfConfig":"34"},{"size":922,"mtime":1610436446000,"results":"55","hashOfConfig":"34"},{"size":435,"mtime":1609860035000,"results":"56","hashOfConfig":"34"},{"size":3982,"mtime":1618329564838,"results":"57","hashOfConfig":"34"},{"size":2408,"mtime":1617013865787,"results":"58","hashOfConfig":"34"},{"size":1718,"mtime":1616681964380,"results":"59","hashOfConfig":"34"},{"size":1297,"mtime":1615981391851,"results":"60","hashOfConfig":"34"},{"size":3641,"mtime":1616041697829,"results":"61","hashOfConfig":"34"},{"size":3645,"mtime":1616041686639,"results":"62","hashOfConfig":"34"},{"size":3467,"mtime":1616509046287,"results":"63","hashOfConfig":"34"},{"size":4332,"mtime":1617534684070,"results":"64","hashOfConfig":"34"},{"size":2852,"mtime":1618921405684,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"bqrvr0",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Projects\\React学习\\test_paper_system\\src\\index.js",[],["141","142"],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\reducers.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\App.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actionType.js",["143"],"F:\\Projects\\React学习\\test_paper_system\\src\\routers\\route.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\login\\index.jsx",["144"],"import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport login from '../../store/actions/login';\nimport {\n    Card,\n    Form,\n    Input,\n    Button,\n    Radio,\n    Row,\n    Col,\n    Divider,\n    message,\n } from 'antd';\nimport './index.css';\nimport APIS from '../../constants/api';\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 6, span: 10 },\n};\n\nconst rules = {\n    userName: [{\n        required: true,\n        message: '请输入用户名',\n    }],\n    passWord: [{\n        required: true,\n        message: '请输入密码',\n    }],\n    loginType: [{\n        required: true,\n        message: '请选择登录方式',\n    }],\n    verificationCode: [{\n        required: true,\n        message: '请输入验证码',\n    }]\n}\n\nclass app extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            verificationCode: '',\n            date: new Date(),\n        };\n    }\n\n    formRef = React.createRef();\n\n    handleChangeItem = (filde, value) => {\n        this.setState({\n            verificationCode: value,\n        });\n    }\n    onFinish = (values) => {\n        const { verificationCode } = this.state;\n        this.setState({\n            formData: {...values, verificationCode},\n        }, this.handleLogin);\n    }\n\n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n        message.error({\n            content: '请输入完整信息',\n            className: 'custom-class',\n            style: {marginTop: '30vh'},\n        });\n    };\n\n    onReset = () => {\n        this.formRef.current.resetFields();\n    };\n\n    handleLogin = () => {\n        const { onLogin } = this.props;\n        const { formData } = this.state;\n        onLogin({ formData, props: this.props });\n    }\n    render() {\n        const { formData, date, verificationCode } = this.state;\n        return (\n            <Card\n                title=\"欢迎登录自动组卷系统\"\n                extra={<Link to='/signIn'>去注册</Link>}\n                id=\"login-container\"\n            >\n                 <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={formData}\n                    ref={this.formRef}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"用户名\"\n                        name=\"userName\"\n                        rules={rules.userName}\n                    >\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入用户名\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"密码\"\n                        name=\"passWord\"\n                        rules={rules.passWord}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入密码\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"账号类型\"\n                        name=\"type\"\n                        rules={rules.loginType}\n                    >\n                        <Radio.Group\n                            label=\"Radio.Group\"\n                            name=\"radio-group\"\n                        >\n                            <Radio value={0}>用户</Radio>\n                            <Radio value={1}>管理员</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        label=\"验证码\"\n                        name=\"verificationCode\"\n                    >\n                        <Input\n                            style={{width: 85}}\n                            placeholder=\"验证码\"\n                            value={verificationCode || undefined}\n                            onChange={(e) => this.handleChangeItem('verificationCode', e.target.value)}\n                        />\n                        <img\n                            style={{width: 100, marginLeft: 10, height: 32 }}\n                            src={`${APIS.verificationCode}?${date}`}\n                        />\n                    </Form.Item>\n                    \n                    <Divider dashed />\n\n                    <Form.Item {...tailLayout}>\n                        <Row>\n                            <Col span={4}>\n                                <Button\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                >\n                                    登录\n                                </Button>\n                            </Col>\n                            <Col span={4} offset={16}>\n                                <Button htmlType=\"button\" onClick={this.onReset}>\n                                    重置\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Item>\n                </Form>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    username: state.login.username,\n});\n \nconst mapDispatchToProps = dispatch => ({\n    onLogin: (params) => dispatch(login.onLogin(params)),\n});\n \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app);","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\sign\\index.jsx",["145"],"import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport {\n    Card,\n    Form,\n    Input,\n    Button,\n    Row,\n    Col,\n    Divider,\n    message,\n } from 'antd';\nimport $ajax from '../../utils/ajax';\nimport APIS from '../../constants/api';\nimport './index.css';\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 6, span: 10 },\n};\n\nconst rules = {\n    username: [{\n        required: true,\n        message: '请输入用户名',\n    }],\n    password: [{\n        required: true,\n        message: '请输入密码',\n    }],\n    againPassword: [{\n        required: true,\n        message: '请再次输入密码',\n    }]\n}\n\nexport default class app extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            message: '',\n            date: new Date(),\n        };\n    }\n\n    formRef = React.createRef();\n\n    handleChangeItem = (filde, value) => {\n        this.setState({\n            verificationCode: value,\n        });\n    }\n    onFinish = (values) => {\n        const { verificationCode } = this.state;\n        this.setState({\n            formData: {...values, type: 0, verificationCode},\n        }, this.onRegister);\n    };\n    \n    onRegister = () => {\n        const { formData } = this.state;\n        if( formData.againPassword !== formData.passWord) {\n            message.error({\n                content: '密码输入不一致！请重新输入',\n                className: 'custom-class',\n                style: {marginTop: '30vh'},\n            });\n        } else {\n            $ajax.common({\n                method: 'post',\n                api: APIS.userRegister,\n                params: formData,\n                contentType: 'json',\n            }).then(res => {\n                if (res.code === 10018 && res.success === true) { \n                    message.success(res.message);\n                    this.setState({\n                        message: <p style={{ marginLeft: 30, color: 'green'}}> { res.message }</p>,\n                    });\n                } else {\n                    this.setState({\n                        message: <p style={{ marginLeft: 30, color: 'red'}}> { res.message }</p>,\n                    });\n                }\n            }).catch(err => {\n                console.log(err);\n            });\n        }\n        \n    }\n\n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    onReset = () => {\n        this.formRef.current.resetFields();\n    };\n\n    render() {\n        const { formData, message, verificationCode, date } = this.state;\n        return (\n            <Card\n                title=\"欢迎注册\"\n                extra={<Link to='/login'>去登录</Link>}\n                id=\"signIn-container\"\n            >\n                 <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={formData}\n                    ref={this.formRef}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"用户名\"\n                        name=\"userName\"\n                        rules={rules.username}\n                    >\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入用户名\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"密码\"\n                        name=\"passWord\"\n                        rules={rules.password}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入密码\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"确认密码\"\n                        name=\"againPassword\"\n                        rules={rules.againPassword}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请再次输入密码\" />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"验证码\"\n                        name=\"verificationCode\"\n                    >\n                        <Input\n                            style={{width: 85}}\n                            placeholder=\"验证码\"\n                            value={verificationCode || undefined}\n                            onChange={(e) => this.handleChangeItem('verificationCode', e.target.value)}\n                        />\n                        <img\n                            style={{width: 100, marginLeft: 10, height: 32 }}\n                            src={`${APIS.verificationCode}?${date}`}\n                        />\n                    </Form.Item>\n                    { message }\n                    <Divider dashed />\n\n                    <Form.Item {...tailLayout}>\n                        <Row>\n                            <Col span={4}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    注册\n                                </Button>\n                            </Col>\n                            <Col span={4} offset={16}>\n                                <Button htmlType=\"button\" onClick={this.onReset}>\n                                    重置\n                                </Button>\n                            </Col>\n                        </Row>                      \n                    </Form.Item>\n                </Form>\n            </Card>\n        )\n    }\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\home.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemList.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\subjects\\subjects.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperList.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperDetails.jsx",["146"],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\points\\points.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userPerson.jsx",["147","148"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Table,\n    Form,\n    Space,\n    Breadcrumb,\n    Layout,\n    Tag,\n    Input,\n    Button,\n    Card,\n    message,\n    Alert,\n} from 'antd';\nimport user from '../../../../store/actions/user';\nimport WrappedComponent from '../component/wrapComponent';\nconst { Content } = Layout;\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            usernameDisabled: true,\n            passwordDisabled: true,\n        }\n    }\n\n    formRef = React.createRef();\n\n    onFinish = (values) => {\n        console.log('Success:', values);\n        const { passwordDisabled } = this.state;\n        if(!passwordDisabled && (values.againPassword !== values.passWord)){\n            message.error({\n                content: '输入密码不一致，请重新输入',\n                className: 'custom-class',\n                style: {marginTop: '30vh'},\n            });\n            values = \"\";\n        }\n        this.savePersonChange(values);\n      };\n    \n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    // 保存修改\n    savePersonChange = (values) => {\n        const { modifyUser } = this.props;\n        console.log(\"values,|||\", values);\n        if (values) {\n            modifyUser({...values, id: window.localStorage.getItem('userId')});\n            setTimeout( () => {\n                const { userModifySuccess } = this.props;\n                if(userModifySuccess) {\n                    this.setState({\n                        usernameDisabled: true,\n                        passwordDisabled: true,\n                    })\n                }\n                window.localStorage.removeItem('username');\n                window.localStorage.removeItem('userId');\n                window.localStorage.removeItem('type');\n                this.props.history.push('/login');\n            }, 500);\n        }\n    }\n\n    // 取消保存\n    cancalSavePersonChange = () => {\n        this.formRef.current.resetFields();\n        this.setState({\n            usernameDisabled: true,\n            passwordDisabled: true,\n        })\n    }\n\n    render() {\n        const { usernameDisabled, passwordDisabled } = this.state;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card\n                    title={\n                        <Breadcrumb style={{ margin: '16px 0' }}>\n                            <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                            <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                            <Breadcrumb.Item>账号管理</Breadcrumb.Item>\n                            <Breadcrumb.Item>个人中心</Breadcrumb.Item>\n                        </Breadcrumb>\n                    }\n                >\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Card\n                            style={{ width: '80%' }}\n                            title=\"修改个人信息\"\n                            extra={\n                                <Space>\n                                    <Button\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                usernameDisabled: false,\n                                            });\n                                        }}\n                                    >\n                                        修改用户名\n                                    </Button>\n                                    <Button\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                passwordDisabled: false,\n                                            });\n                                        }}\n                                    >\n                                        修改密码\n                                    </Button>\n                                </Space>\n                            }\n                        >\n                            <Alert\n                                message=\"注意修改个人信息之后，会退出系统需重新登录\"\n                                type=\"warning\"\n                                showIcon\n                                closable\n                            />\n                            <Form\n                                {...layout}\n                                name=\"basic\"\n                                layout=\"Vertical\"\n                                style={{ width: '70%', marginTop: 40 }}\n                                className=\"person-form\"\n                                onFinish={this.onFinish}\n                                onFinishFailed={this.onFinishFailed}\n                                ref={this.formRef}\n                            >\n                                <Form.Item\n                                    label=\"用户名\"\n                                    name=\"userName\"\n                                    rules={[{ required: !this.state.usernameDisabled, message: '请输入新用户名' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入新用户名\"\n                                        defaultValue={window.localStorage.getItem('username')}\n                                        disabled={usernameDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"密码\"\n                                    name=\"passWord\"\n                                    rules={[{ required: !this.state.passwordDisabled, message: '请输入新密码' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入新密码\"\n                                        disabled={passwordDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"确认密码\"\n                                    name=\"againPassword\"\n                                    rules={[{ required: !this.state.passwordDisabled, message: '请再次输入新密码' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请再次输入新密码\"\n                                        disabled={passwordDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item wrapperCol={{ offset: 8 }}>\n                                    <Space size={50}>\n                                        <Button\n                                            disabled={usernameDisabled && passwordDisabled}\n                                            onClick={() => { this.cancalSavePersonChange()}}\n                                        >\n                                            取消\n                                        </Button>\n                                        <Button\n                                            type=\"primary\"\n                                            htmlType=\"submit\"\n                                            onClick={ () => { this.savePersonChange()}}\n                                            disabled={usernameDisabled && passwordDisabled}\n                                        >\n                                            保存\n                                        </Button>\n                                    </Space>\n                                </Form.Item>\n                            </Form>\n                        </Card>\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return ({\n        userModifySuccess: state.users.userModifySuccess,\n    })\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    modifyUser: params => dispatch(user.modifyUser(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userManage.jsx",["149","150"],"import React, { Component } from 'react';\nimport {\n    Table,\n    Form,\n    Space,\n    Breadcrumb,\n    Layout,\n    Tag,\n    Input,\n    Button,\n    Card,\n    Modal,\n    Pagination,\n} from 'antd';\nimport { connect } from 'react-redux';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport WrappedComponent from '../component/wrapComponent';\nimport user from '../../../../store/actions/user';\nimport $ajax from '../../../../utils/ajax';\nimport APIS from '../../../../constants/api';\nconst { Content } = Layout;\nconst { confirm } = Modal;\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            modalFormDate: {},\n            pageSize: 10,\n            pageNum: 1,\n            totalCount: 100,\n            tableData: [],\n        }\n    }\n\n    // 删除用户\n    // onDelUser = (id) => {\n    //     confirm({\n    //         title: '系统提示',\n    //         icon: <ExclamationCircleOutlined />,\n    //         content: `确定要删除用户${id}吗？`,\n    //         style: { marginTop: 150 },\n    //         okText: '确认',\n    //         okType: 'danger',\n    //         cancelText: '取消',\n    //         onOk() {\n    //           console.log('OK');\n    //         },\n    //         onCancel() {\n    //           console.log('Cancel');\n    //         },\n    //       });\n    // }\n\n    // 禁用或启用用户\n    onDisableUser = (id, auth) => {\n        confirm({\n            title: '系统提示',\n            icon: <ExclamationCircleOutlined />,\n            content:`注意禁用后用户将不能再登录系统，启用后可继续使用确定要${auth ? '启用' : '禁用'}用户${id}吗？`,\n            style: { marginTop: 150 },\n            okText: '确认',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => {\n                // 确认之后，直接返回登录页\n                const { forbidUser } = this.props;\n                forbidUser({id, status: +(!auth)});\n                setTimeout( () => {\n                    const { userForbidSuccess } = this.props;\n                    if (userForbidSuccess) {\n                        this.handleGetUserList();\n                    }\n                }, 500);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n          });\n    }\n    getColumns = () => {\n        return [\n            {\n                title: 'ID',\n                dataIndex: 'id',\n                key: 'id',\n            },\n            {\n                title: '用户名',\n                dataIndex: 'userName',\n                key: 'userName',\n            },\n            {\n                title: '身份类型',\n                dataIndex: 'type',\n                key: 'type',\n                render: (text, record) => (\n                    <Tag color={record.type ?'volcano': 'cyan'}>{record.type ? '管理员': '用户'}</Tag>\n                )\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'createTime',\n                key: 'createTime',\n            },\n            {\n                title: '最后一次登录时间',\n                dataIndex: 'lastLogTime',\n                key: 'lastLogTime',\n            },\n            {\n                title: '操作',\n                key: '',\n                render: (text, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={ () => { this.userManageModal('modify', record)}}>修改用户信息</a>\n                        {/* <a onClick={() => {this.onDelUser(record.id)}}>删除</a> */}\n                        <a onClick={() => {this.onDisableUser(record.id, record.status)}}>\n                            {\n                                record.status ?\n                                '启用' :\n                                '禁用' \n                            }\n                        </a>\n                    </Space>\n                ),\n              },\n          ];\n    }\n\n    componentDidMount(){\n        this.handleGetUserList();\n    }\n\n    handleGetUserList = () => {\n        const { pageSize, pageNum } = this.state;\n        const params = {\n            pageSize,\n            currentPage: pageNum,\n        };\n        $ajax.common({\n            method: 'get',\n            api: APIS.getUserList,\n            params,\n            contentType: 'json',\n        }).then(res => {\n            if (res.code === 10000 && res.success === true) { \n                const { currentPage, totalCount, dataList, size } = res.data;\n                this.setState({\n                    pageSize: size,\n                    pageNum: currentPage,\n                    totalCount: totalCount,\n                    tableData: dataList,\n                })\n            }\n        }).catch(err => {\n            console.log('err------',err);\n        })\n    }\n\n    onChangePage = (page, pageSize) => {\n        this.setState({\n            currentPage: page,\n            pageSize,\n        }, this.handleGetUserList);\n    }\n\n    handleChangeItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { formData } = this.state;\n        const tempFormDate = Object.assign({}, formData, { [filedName]: value });\n        this.setState({\n            formData: tempFormDate,\n        });\n    }\n\n\n    onSubmit = () => {\n        console.log('submit提交表单',this.state.formData);\n    }\n\n\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { modalFormDate } = this.state;\n        const tempModalFormDate = Object.assign({}, modalFormDate, { [filedName]: value });\n        this.setState({\n            modalFormDate: tempModalFormDate,\n        });\n    }\n    // 确认添加或修改\n    onOkModify = (type, record) => {\n        const { modalFormDate } = this.state;\n        const { addUser, updateUser} = this.props;\n        if(type === 'add') {\n            console.log('新增数据', type, modalFormDate);\n            addUser(modalFormDate);\n            setTimeout( () => {\n                // 请求返回之后，modalFormDate清空\n                const { userAddSuccess } = this.props;\n                if (userAddSuccess) {\n                    const tempFormData = modalFormDate;\n                    tempFormData.userName = '';\n                    tempFormData.passWord = '';\n                    this.setState({\n                        modalFormDate: tempFormData,\n                    }, () => {\n                        this.handleGetUserList();\n                    });\n                }\n            }, 500);\n        }\n        if( type === 'modify'){\n            const tempModalFormDate = Object.assign({}, record, modalFormDate,);\n            console.log('修改数据',type,tempModalFormDate);\n            // 请求返回之后，modalFormDate清空\n            updateUser(tempModalFormDate);\n            setTimeout(() => {\n                const { userUpdateSuccess } = this.props;\n                if (userUpdateSuccess) {\n                    const tempFormData = tempModalFormDate;\n                    tempFormData.userName = '';\n                    tempFormData.passWord = '';\n                    this.setState({\n                        modalFormDate: tempFormData,\n                    }, () => {\n                        this.handleGetUserList();\n                    });\n                }\n            }, 500);\n        }\n    }\n\n    // 添加或修改弹窗\n    userManageModal = (type, record) => {\n        const { modalFormDate } = this.state;\n        return (\n            confirm({\n                title: type === 'modify' ? '修改用户信息' : '增加用户',\n                icon: <ExclamationCircleOutlined />,\n                content: (\n                    <Form\n                        name=\"basic\"\n                        layout=\"Horizontal\"\n                        initialValues={record}\n                    >\n                        <Form.Item\n                            label={type === 'add' ? \"初始用户名\": \"修改用户名\"}\n                            name=\"userName\"\n                        >\n                            <Input\n                                placeholder=\"请输入用户名\"\n                                value={modalFormDate.userName}\n                                onChange={ (e) => { this.handleChangeModalItem('userName', e.target.value)}}\n                            />\n                        </Form.Item>\n                        <Form.Item\n                            label={type === 'add' ? \"初始密码\": \"重置密码\"}\n                            name=\"passWord\"\n                        >\n                            <Input\n                                placeholder=\"请输入密码\"\n                                value={modalFormDate.passWord}\n                                onChange={ (e) => { this.handleChangeModalItem('passWord', e.target.value)}}\n                            />\n                        </Form.Item>\n                    </Form>\n                ),\n                style: { marginTop: 150 },\n                okText: '保存',\n                okType: 'danger',\n                cancelText: '取消',\n                onOk: () => {\n                    this.onOkModify(type, record);\n                },\n                onCancel: () => {\n                    console.log('不保存')\n                },\n            })      \n        )\n    }\n\n    render() {\n        const { modalFormDate, pageSize, pageNum, totalCount, tableData } = this.state;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>账号管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>用户管理</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Form\n                            name=\"basic\"\n                            layout=\"inline\"\n                        >\n                            <Form.Item\n                                label=\"用户名\"\n                                name=\"userName\"\n                            >\n                                <Input\n                                    placeholder=\"请输入用户名\"\n                                    value={modalFormDate.userName}\n                                    onChange={ (e) => { this.handleChangeModalItem('userName', e)}}\n                                />\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\" onClick={this.onSubmit}>\n                                    查询\n                                </Button>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={ () => { this.userManageModal('add', modalFormDate)}}\n                                >\n                                    添加用户\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    \n                        <Table\n                            style={{ marginTop: 20 }}\n                            bordered\n                            columns={this.getColumns()}\n                            dataSource={tableData}\n                            pagination={false}\n                        />\n                        <Pagination\n                            style={{ float: 'right', marginTop: 20}}\n                            showQuickJumper\n                            current={pageNum}\n                            total={totalCount}\n                            pageSize={pageSize}\n                            onChange={this.onChangePage}\n                        />\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return ({\n        userAddSuccess: state.users.userAddSuccess,\n        userUpdateSuccess: state.users.userUpdateSuccess,\n        userForbidSuccess: state.users.userForbidSuccess,\n    })\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    addUser: params => dispatch(user.addUser(params)),\n    updateUser: params => dispatch(user.updateUser(params)),\n    forbidUser: params => dispatch(user.forbidUser(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemManage.jsx",["151","152"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Form,\n    Button,\n    Input,\n    Tag,\n    Row,\n    Col,\n    Breadcrumb,\n    Layout,\n    Radio,\n    Card,\n    Checkbox,\n    Alert,\n    message\n} from 'antd';\nimport './index.css';\nimport WrappedComponent from '../component/wrapComponent';\nimport points from '../../../../store/actions/points';\nimport subjects from '../../../../store/actions/subjects';\nimport problems from '../../../../store/actions/problems';\nimport SearchProblem from './problemSearch';\nimport BaseForm from '../component/BaseForm';\n\nconst { TextArea } = Input;\nconst { Content } = Layout;\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 },\n};\n\nconst questionExample = {\n    choice:'输入题目，形如--人体最大的细胞是()。注意需要考生答题部分用括号表示。',\n    judgement: '输入题目，形如--计算机网络是一门很有意思的课程。注意需要考生答题部分用括号表示。',\n    blank: '输入题目，形如--从计算机网络系统组成的角度看，计算机网络可以分为()和()。注意需要考生答题部分用括号表示。',\n    shortAnswer: '输入题目，形如--你为什么喜欢计算机网络这门课程呢？',\n    multiple: '输入题目，形如--你最喜欢的事情是()。注意需要考生答题部分用括号表示。'\n}\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {\n                problemType: 'choice',\n                subject: '',\n                difficultyLevel: '',\n                knowledgePoints: '',\n                problemText: '',\n                answer: '',\n                choiceOptionA: '',\n                choiceOptionB: '',\n                choiceOptionC: '',\n                choiceOptionD: '',\n                multipleOptionA: '',\n                multipleOptionB: '',\n                multipleOptionC: '',\n                multipleOptionD: '',\n                multipleOptionE: '',\n                multipleOptionF: '',\n                score:'',\n                userId: window.localStorage.getItem('userId'),\n            },\n            formDataTemp: {},\n            check: {},\n            disable: false,\n            required: true,\n            type: this.props.match.params.type,\n            problemType: sessionStorage.getItem('problemType'),\n            problemId: sessionStorage.getItem('problemId')\n        }\n    }\n\n    formRef = React.createRef();\n\n    // 单选\n    renderChoice = () => {\n        const { formData, check, disable, required} = this.state;\n        return(\n            <div className=\"problems_layout\">\n                <Form.Item\n                    label=\"\"\n                    name=\"choiceOptionD\"\n                    className=\"problems_layout\"\n                    {...layout}\n                >\n                    <BaseForm\n                        warning={check.choiceOptionA}\n                        required={required}\n                    >\n                        <Tag color=\"green\">选项</Tag>：输入选项内容\n                        <div key='A' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">A</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项A的内容`}\n                                value={formData.choiceOptionA}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`choiceOptionA`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    \n                    <BaseForm\n                        warning={check.choiceOptionB}\n                        required={required}\n                    >\n                        <div key='B' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">B</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项B的内容`}\n                                value={formData.choiceOptionB}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`choiceOptionB`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    \n                    <BaseForm\n                        warning={check.choiceOptionC}\n                        required={required}\n                    >\n                        <div key='C' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">C</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项C的内容`}\n                                value={formData.choiceOptionC}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`choiceOptionC`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    \n                    <BaseForm\n                        warning={check.choiceOptionD}\n                        required={required}\n                    >\n                        <div key='D' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">D</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项D的内容`}\n                                value={formData.choiceOptionD}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`choiceOptionD`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                </Form.Item>\n                <Form.Item\n                    label=\"\"\n                    name=\"answer\"\n                    {...layout}\n                >\n                    <BaseForm\n                        warning={check.answer}\n                        required={required}\n                    >\n                        <Tag color=\"green\">正确答案</Tag>：\n                        <Radio.Group\n                            tyle={{ marginLeft: 10 }}\n                            className=\"problems_input_layout\"\n                            placeholder={`请输入的此题答案`}\n                            value={formData.answer}\n                            onChange={(e) => {\n                                this.handleChangeItem('answer', e.target.value);\n                            }}\n                            disabled={disable}\n                        >\n                            <Radio value=\"A\">A</Radio>\n                            <Radio value=\"B\">B</Radio>\n                            <Radio value=\"C\">C</Radio>\n                            <Radio value=\"D\">D</Radio>\n                        </Radio.Group>\n                    </BaseForm>\n                </Form.Item>\n            </div>\n        )\n    }\n\n    // 多选\n    renderMultiple = () => {\n        const { formData, check, disable, required} = this.state;\n        return(\n            <div className=\"problems_layout\">\n                <Form.Item\n                    label=\"\"\n                    name=\"multipleOptionD\"\n                    className=\"problems_layout\"\n                    {...layout}\n                >\n                    <BaseForm\n                        warning={check.multipleOptionA}\n                        required={required}\n                    >\n                        <Tag color=\"green\">选项</Tag>：输入选项内容\n                        <Alert\n                            style={{ width: '100%', marginTop: 10}}\n                            message=\"至少输入四个选项内容哦\"\n                            type=\"warning\"\n                            showIcon\n                            closable\n                        />\n                        <div key='A' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">A</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项A的内容`}\n                                value={formData.multipleOptionA}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`multipleOptionA`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    \n                    <BaseForm\n                        warning={check.multipleOptionB}\n                        required={required}\n                    >\n                        <div key='B' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">B</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项B的内容`}\n                                value={formData.multipleOptionB}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`multipleOptionB`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    \n                    <BaseForm\n                        warning={check.multipleOptionC}\n                        required={required}\n                    >\n                        <div key='C' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">C</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项C的内容`}\n                                value={formData.multipleOptionC}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`multipleOptionC`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    \n                    <BaseForm\n                        warning={check.multipleOptionD}\n                        required={required}\n                    >\n                        <div key='D' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">D</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项D的内容`}\n                                value={formData.multipleOptionD}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`multipleOptionD`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    <BaseForm\n                        warning={check.multipleOptionE}\n                        required={required}\n                    >\n                        <div key='E' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">E</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项E的内容`}\n                                value={formData.multipleOptionE}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`multipleOptionE`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                    <BaseForm\n                        warning={check.multipleOptionF}\n                        required={required}\n                    >\n                        <div key='E' className=\"problems_option_layout\">\n                            <Tag color=\"blue\">F</Tag>\n                            <Input\n                                className=\"problems_input_layout\"\n                                placeholder={`请输入选项F的内容`}\n                                value={formData.multipleOptionF}\n                                onChange={(e) => {\n                                    this.handleChangeItem(`multipleOptionF`, e.target.value);\n                                }}\n                                disabled={disable}\n                            />\n                        </div>\n                    </BaseForm>\n                </Form.Item>\n                <Form.Item\n                    label=\"\"\n                    name=\"answer\"\n                    {...layout}\n                >\n                    <BaseForm\n                        warning={check.answer}\n                        required={required}\n                    >\n                        <Tag color=\"green\">正确答案</Tag>：\n                        <Checkbox.Group\n                            style={{ marginLeft: 10 }}\n                            className=\"problems_input_layout\"\n                            placeholder={`请输入的此题答案`}\n                            value={formData.answer}\n                            onChange={(e) => {\n                                this.handleChangeItem('answer', e);\n                            }}\n                            disabled={disable}\n                        >\n                            <Checkbox value=\"A\">A</Checkbox>\n                            <Checkbox value=\"B\">B</Checkbox>\n                            <Checkbox value=\"C\">C</Checkbox>\n                            <Checkbox value=\"D\">D</Checkbox>\n                            <Checkbox value=\"E\">E</Checkbox>\n                            <Checkbox value=\"F\">F</Checkbox>\n                        </Checkbox.Group>\n                    </BaseForm>\n                </Form.Item>\n            </div>\n        )\n    }\n    // 填空\n    renderBlank = () => {\n        const { formData, check, disable, required } = this.state;\n        return(\n            <div className=\"problems_layout\">\n                <Form.Item\n                    label=\"\"\n                    name=\"answer\"\n                    {...layout}\n                >\n                    <BaseForm\n                        warning={check.answer}\n                        required={required}\n                    >\n                        <Tag color=\"green\">正确答案</Tag>：请输入正确答案\n                        <Input\n                            style={{ marginTop: 5 }}\n                            className=\"problems_input_layout\"\n                            placeholder={`请输入的此题答案，多个答案请以逗号隔开`}\n                            value={formData.answer}\n                            onChange={(e) => {\n                                this.handleChangeItem('answer', e.target.value);\n                            }}\n                            disabled={disable}\n                        />\n                    </BaseForm>\n                </Form.Item>\n            </div>\n        )\n    }\n\n    // 判断\n    renderJudgement = () => {\n        const { formData, check, disable, required } = this.state;\n        return(\n            <div className=\"problems_layout\">\n                <Form.Item\n                    label=\"\"\n                    name=\"answer\"\n                    {...layout}\n                >\n                    <BaseForm\n                        warning={check.answer}\n                        required={required}\n                    >\n                        <Tag color=\"green\">正确答案</Tag>：\n                        <Radio.Group\n                            style={{ marginTop: 5 }}\n                            className=\"problems_input_layout\"\n                            placeholder={`请输入的此题答案`}\n                            value={formData.answer}\n                            onChange={(e) => {\n                                this.handleChangeItem('answer', e.target.value);\n                            }}\n                            disabled={disable}\n                        >\n                            <Radio value=\"true\">对</Radio>\n                            <Radio value=\"false\">错</Radio>\n                        </Radio.Group>\n                    </BaseForm>   \n                </Form.Item>\n            </div>\n        )\n    }\n\n    // 简答\n    renderShortAnswer = () => {\n        const { formData, check, disable, required } = this.state;\n        return(\n            <div className=\"problems_layout\">\n                <Form.Item\n                    label=\"\"\n                    name=\"answer\"\n                    {...layout}\n                >\n                    <BaseForm\n                        warning={check.answer}\n                        required={required}\n                    >\n                        <Tag color=\"green\">正确答案</Tag>：请输入正确答案\n                        <TextArea\n                            style={{ marginTop: 5 }}\n                            className=\"problems_input_layout\"\n                            placeholder={`请输入的此题答案`}\n                            autoSize={{ minRows: 3, maxRows: 6 }}\n                            value={formData.answer}\n                            onChange={(e) => {\n                                this.handleChangeItem('answer', e.target.value);\n                            }}\n                            disabled={disable}\n                        />\n                    </BaseForm>\n                </Form.Item>\n            </div>\n            \n        )\n    }\n\n    componentDidMount() {\n        const { type, formData } = this.state;\n        const { getSubjects } = this.props;\n        console.log('formDataTemp |||||', this.state.formDataTemp, type);\n        this.setState({\n            formDataTemp: formData,\n        });\n        this.handleTypeInit(type);\n        getSubjects();\n    }\n\n    // 初始化\n    handleTypeInit = (type) => {\n        switch (type) {\n            case 'add':\n                this.setState({\n                    disable: false,\n                });\n                break;\n            case 'modify':\n                this.setState({\n                    disable: false,\n                });\n                this.handleGetDetails();\n                break;\n            case 'view':\n                this.setState({\n                    disable: true,\n                });\n                this.handleGetDetails();\n                break;\n            default:\n                break;\n        }\n    }\n\n    // 获取表单详情\n    handleGetDetails = () => {\n        const { viewProblem } = this.props;\n        const { problemId, problemType } = this.state;\n        viewProblem({ problemId, problemType });\n        setTimeout( () => {\n            const { problemDetail } = this.props;\n            this.setState({\n                formData: problemDetail,\n            });\n        }, 500);\n    \n    }\n\n    // 更新字段\n    handleChangeItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { formData } = this.state;\n        const tempFormDate = Object.assign({}, formData, { [filedName]: value });\n        this.setState({\n            formData: tempFormDate,\n        });\n        // TODO: 如果学科字段更新，则更新知识点。\n        if (filedName === 'subject') {\n            const { getPoints, getSubjects } = this.props;\n            getSubjects();\n            getPoints({ currentPage: 1, pageSize: 10, userId: window.localStorage.getItem('userId'), subjectId: value });\n        }\n    }\n\n    // 字段校验\n    onCheck = () => {\n        const { formData, check } = this.state;\n        const {\n            answer,\n            problemText,\n            problemType,\n            choiceOptionA,\n            choiceOptionB,\n            choiceOptionC,\n            choiceOptionD,\n            multipleOptionA,\n            multipleOptionB,\n            multipleOptionC,\n            multipleOptionD,\n            subject,\n            difficultyLevel,\n            knowledgePoints,\n            score,\n        } = formData;\n        check.answer = !answer ? '请输入此题答案' : '';\n        check.problemText = !problemText ? '请输入题目内容' : '';\n        check.subject = !subject ? '请选择课程' : '';\n        check.difficultyLevel = !difficultyLevel ? '请选择难度等级' : '';\n        check.problemType = !problemType ? '请选择题目类型' : '';\n        check.knowledgePoints = !knowledgePoints ? '请选择包含的知识点' : '';\n        check.problemType = !problemType ? '请选择题目类型' : '';\n        check.score = !score ? '请选择题目分数' : '';\n        if (problemType === 'choice') {\n            check.choiceOptionA = !choiceOptionA ? '请输入选项A的内容' : '';\n            check.choiceOptionB = !choiceOptionB ? '请输入选项B的内容' : '';\n            check.choiceOptionC = !choiceOptionC ? '请输入选项C的内容' : '';\n            check.choiceOptionD = !choiceOptionD ? '请输入选项D的内容' : '';\n        }\n        if(problemType === 'multiple') {\n            check.multipleOptionA = !multipleOptionA ? '请输入选项A的内容' : '';\n            check.multipleOptionB = !multipleOptionB ? '请输入选项B的内容' : '';\n            check.multipleOptionC = !multipleOptionC ? '请输入选项C的内容' : '';\n            check.multipleOptionD = !multipleOptionD ? '请输入选项D的内容' : '';\n        }\n        this.setState({\n            check,\n        });\n        return check;\n    };\n\n    // 提交\n    onSubmit = () => {\n        const check = this.onCheck();\n        if (Object.values(check).filter((item) => !!item).length > 0) return null;\n        console.log('submit提交表单',this.state.formData);\n        const { addProblem, modifyProblem } = this.props;\n        const { formData, type, problemId, problemType } = this.state;\n        switch(type) {\n            case 'add':\n                addProblem({...formData, answer: formData.answer.toString()});\n                setTimeout(() => {\n                    const { problemAddSuccess } = this.props;\n                    if(problemAddSuccess) {\n                        const { formDataTemp } = this.state;\n                        this.setState({\n                            formData: formDataTemp\n                        });\n                    }\n                }, 500);\n                break;\n            case 'modify':\n                modifyProblem({\n                    ...this.state.formData,\n                    answer: this.state.formData.answer.toString(),\n                    problemId,\n                });\n                setTimeout(() => {\n                    const { problemModifySuccess } = this.props;\n                    if(problemModifySuccess) {\n                        message.success({\n                            content:'修改成功',\n                            style: {marginTop: '30vh'},\n                        });\n                    }\n                }, 500);\n                break;\n                break;\n            default:\n                break;\n        }\n        \n    }\n    \n    // 渲染不同模板\n    renderFormItem = () => {\n        const { formData } = this.state;\n        const { problemType } = formData;\n        switch(problemType) {\n            case 'choice':\n                return this.renderChoice();\n            case 'judgement':\n                return this.renderJudgement();\n            case 'multiple':\n                return this.renderMultiple();\n            case 'blank':\n                return this.renderBlank();\n            case 'shortAnswer':\n                return this.renderShortAnswer();\n            default:\n                return null;\n        }\n    }\n\n    render() {\n        const { formData, check, disable, required, type } = this.state;\n        const { problemType } = formData;\n        const { subjectsList, pointsList } = this.props;\n        return (\n            <div className=\"problem_container\">\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试题管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>{type === 'add' ? '增加试题' : '修改试题'}</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <SearchProblem\n                            handleChangeItem={this.handleChangeItem}\n                            handleSubmit={this.onSubmit}\n                            formData={formData}\n                            check={check}\n                            disabled={disable}\n                            type={type}\n                            require={required}\n                            subjectsList={subjectsList}\n                            pointsList={pointsList}\n                        />\n                        <Form\n                            name=\"basic_template\"\n                            layout=\"vertical\"\n                            ref={this.formRef}\n                            initialValues={formData}\n                            onFinish={this.onFinish}\n                            onFinishFailed={this.onFinishFailed}\n                            className=\"problems_form_layout\"\n                        >\n                            <Form.Item\n                                    label=\"\"\n                                    name=\"problemText\"\n                                    {...layout}\n                                >\n                                <BaseForm warning={check.problemText}>\n                                    <Tag color=\"green\">题目</Tag>：\n                                    <span>{questionExample[problemType]}</span>\n                                    <TextArea\n                                        placeholder=\"请输入题目内容\"\n                                        autoSize={{ minRows: 3, maxRows: 6 }}\n                                        style={{ marginTop: 5 }}\n                                        value={formData.problemText}\n                                        onChange={(e) => {\n                                            this.handleChangeItem('problemText', e.target.value);\n                                        }}\n                                        disabled={disable}\n                                    />\n                                </BaseForm>\n                            </Form.Item>\n                            {\n                                this.renderFormItem()\n                            }\n                            <Row>\n                                <Col span={2} offset={19}>\n                                    <Form.Item className=\"problems_layout\">\n                                        <Button\n                                            type=\"primary\"\n                                            onClick={this.onSubmit}\n                                            disabled={disable}\n                                        >\n                                            保存\n                                        </Button>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={2}>\n                                    <Form.Item className=\"problems_layout\">\n                                        <Button\n                                            type=\"primary\"\n                                            disabled={disable}\n                                        >\n                                            取消\n                                        </Button>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    subjectsList: state.subjects.subjectsList,\n    pointsList: state.points.pointsList,\n    problemAddSuccess: state.problems.problemAddSuccess,\n    problemDetail: state.problems.problemDetail,\n    problemModifySuccess: state.problems.problemModifySuccess,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getSubjects: params => dispatch(subjects.getSubjects(params)),\n    getPoints: params => dispatch(points.getPoints(params)),\n    addProblem: params => dispatch(problems.addProblem(params)),\n    viewProblem: params => dispatch(problems.viewProblem(params)),\n    modifyProblem: params => dispatch(problems.modifyProblem(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperAutomatic.jsx",["153"],"F:\\Projects\\React学习\\test_paper_system\\src\\constants\\api.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\utils\\ajax.js",["154"],"import axios from 'axios';\nimport { message } from 'antd';\naxios.defaults.withCredentials = true;\naxios.interceptors.request.use((config) => {\n    // if (config.headers['Content-Type'] !== 'application/json') {\n    //     config.data = JSON.stringify(config.data);\n    // }\n    return config;\n}, error => Promise.reject(error));\n\nconst contentTypeMap = {\n    json: 'application/json',\n    form: 'application/x-www-form-urlencoded',\n    file: 'multipart/form-data',\n};\n\nexport function ajax({\n    method = 'get',\n    api,\n    params,\n    contentType = 'form',\n}) {\n    const headers = {\n        'Content-Type': contentTypeMap[contentType] || 'application/x-www-form-urlencoded',\n    };\n\n    let config;\n    let callerFunc;\n    if (method === 'post') {\n        config = {\n            headers,\n        };\n        callerFunc = axios.post;\n    } else if (method === 'get') {\n        params = {\n            params,\n            headers,\n        };\n        callerFunc = axios.get;\n    } else {\n        callerFunc = () => {\n            throw new Error(`当前方法${method}暂不支持`);\n        };\n    }\n    return callerFunc(api, params, config).then((response) => {\n        const { status, data } = response;\n\n        if (status === 200) {\n            const res = data;\n            if (typeof res === 'string') {\n                message.error('返回值解析错误');\n            } else {\n                return res;\n            }\n        } else {\n            message.error('网络请求失败');\n        }\n        return undefined;\n    }).catch((e) => {\n        console.log(e);\n    });\n}\n\nexport function ajaxFile({ api, params }) {\n    const formData = new FormData();\n    formData.append('file', params.file);\n    const config = {\n        method: 'post',\n        body: formData,\n    };\n    return fetch(api, config).then(response => response.json());\n}\n\nexport const pure = axios;\n\nexport default {\n    common: ajax,\n    ajaxFile,\n};\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemSearch.jsx",["155"],"import React, { Component } from 'react';\n\nimport BaseForm from '../component/BaseForm';\nimport {\n    Form,\n    Select,\n    Button,\n    Input,\n    InputNumber,\n} from 'antd';\nimport './index.css';\nconst { Option } = Select;\n\nexport default class app extends Component {\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        const {\n            handleChangeItem,\n            formData,\n            handleSubmit,\n            check,\n            disabled,\n            type,\n            require,\n            pointsList,\n            subjectsList,\n        } = this.props;\n        return (\n            <div>\n                <Form\n                    name=\"basic\"\n                    layout=\"inline\"\n                    initialValues={formData}\n                    required={require}\n                    className=\"search-item\"\n                >\n                    <Form.Item\n                        label=\"题目类型\"\n                        name=\"problemType\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.problemType} \n                            required={require}\n                            requireStyle\n                        >\n                            <Select\n                                style={{ width: 180 }}\n                                value={formData.problemType || undefined}\n                                defaultValue=\"all\"\n                                onChange={(e) => { handleChangeItem('problemType', e)}}\n                                disabled={disabled}\n                            >\n                                {!type ? <Option value=\"all\">全部</Option> : ''}\n                                <Option value=\"choice\">单选题</Option>\n                                <Option value=\"judgement\">判断题</Option>\n                                <Option value=\"multiple\">多选题</Option>\n                                <Option value=\"blank\">填空题</Option>\n                                <Option value=\"shortAnswer\">简答题</Option>\n                            </Select>\n                        </BaseForm>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"课程\"\n                        name=\"subject\"\n                        required={require}\n                    >\n                        <BaseForm \n                            warning={check.subject}\n                            required={require}\n                            requireStyle\n                        >\n                            <Select \n                                style={{ width: 180 }}\n                                placeholder=\"请选择课程\"\n                                value={formData.subject || undefined}\n                                onChange={(e) => { handleChangeItem('subject', e)}}\n                                disabled={disabled}\n                            >\n                                {!type ? <Option value=\"\">全部</Option> : ''} \n                                {\n                                    subjectsList.map((item) => {\n                                        return (\n                                            <Option value={item.subjectId}>{item.subjectName}</Option>\n                                        )\n                                    })\n                                }\n                            </Select>\n                        </BaseForm>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        label=\"包含知识点\"\n                        name=\"knowledgePoints\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.knowledgePoints}\n                            required={require}\n                            requireStyle\n                        >\n                            <Select\n                                style={{ width: 240 }}\n                                mode=\"multiple\"\n                                optionLabelProp=\"label\"\n                                placeholder=\"请选择包含知识点\"\n                                value={formData.knowledgePoints || undefined}\n                                onChange={(e) => { handleChangeItem('knowledgePoints', e)}}\n                                disabled={(!formData.subject? true : false) && (!type ? false : true)}\n                            >\n                                {\n                                    pointsList.map((item) => {\n                                        return (\n                                            <Option value={item.pointId} label={item.pointName}>\n                                                <div className=\"demo-option-label-item\">\n                                                    <span role=\"img\" aria-label={item.pointName}>\n                                                        {item.pointName}\n                                                    </span>\n                                                    <span style={{ float: 'right'}}>\n                                                        ({item.chapter})\n                                                    </span>\n                                                </div>\n                                            </Option>\n                                        )\n                                    })\n                                }\n                            </Select>\n                        </BaseForm>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"难度等级\"\n                        name=\"difficultyLevel\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.difficultyLevel}\n                            required={require}\n                            requireStyle\n                        >\n                            <InputNumber\n                                min={0.1}\n                                max={1}\n                                style={{ width: 180 }}\n                                placeholder=\"请输入难度等级（0~1）\"\n                                value={formData.difficultyLevel || undefined}\n                                onChange={(e) => { handleChangeItem('difficultyLevel', e)}}\n                                disabled={disabled}\n                            />\n                        </BaseForm>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        label=\"题目分数\"\n                        name=\"score\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.score}\n                            required={require}\n                            requireStyle\n                        >\n                            <Select\n                                style={{ width: 180 }}\n                                placeholder=\"请选择题目分数\"\n                                value={formData.score || undefined}\n                                onChange={(e) => { handleChangeItem('score', e)}}\n                                disabled={disabled}\n                            >\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                                <Option value=\"4\">4</Option>\n                                <Option value=\"5\">5</Option>\n                                <Option value=\"6\">6</Option>\n                                <Option value=\"7\">7</Option>\n                                <Option value=\"8\">8</Option>\n                                <Option value=\"9\">9</Option>\n                                <Option value=\"10\">10</Option>\n                                <Option value=\"20\">20</Option>\n                            </Select>\n                        </BaseForm>\n                    </Form.Item>\n                    {\n                        !type \n                        ? \n                        <Form.Item\n                            label=\"题目信息\"\n                            name=\"problemText\"\n                            required={require}\n                        >\n                            <BaseForm\n                                warning={check.problemText}\n                                required={require}\n                                requireStyle\n                            >\n                                <Input\n                                    style={{ width: 300 }}\n                                    placeholder=\"请输入题目信息\"\n                                    value={formData.problemText || undefined}\n                                    onChange={(e) => { handleChangeItem('problemText', e.target.value)}}\n                                    disabled={disabled}\n                                />\n                            </BaseForm>\n                        </Form.Item>\n                        : ''\n                    }\n                    <Form.Item className=\"problems_layout\">\n                        {\n                            !type ? \n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                onClick={() => { handleSubmit() }}\n                            >\n                                查询\n                            </Button> : ''\n                        }\n                    </Form.Item>\n                </Form>\n            </div>\n        )\n    }\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\wrapComponent.jsx",["156","157"],"import React, { Component } from 'react'\nimport { Layout } from 'antd';\nimport Nav from '../../nav';\nimport Head from '../../header';\nconst { Header, Sider } = Layout;\n\nexport default (WrappedComponent) => {\n    return class extends Component {\n        constructor(props){\n            super(props);\n        }\n        render() {\n            return (\n                <Layout>\n                    <Header style={{ paddingLeft: 10, paddingRight: 10, height: 70 }}>\n                        <Head />\n                    </Header>\n                    <Layout>\n                        <Sider width={200} style={{ backgroundColor: '#fff'}}>\n                            <Nav />\n                        </Sider>\n                        <Layout>\n                            <WrappedComponent {...this.props}/>\n                        </Layout>\n                    </Layout>\n                </Layout>\n            );\n        }\n    };\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\BaseForm.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\RenderProblem.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\nav\\index.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\header\\index.jsx",["158","159","160"],"import React, { Component } from 'react'\nimport { Menu } from 'antd';\nimport { SettingOutlined, LogoutOutlined, LoginOutlined } from '@ant-design/icons';\n\nconst { SubMenu } = Menu;\nexport default class app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    handleLogOut = () => {\n        window.localStorage.removeItem('userId');\n        window.localStorage.removeItem('username');\n        window.localStorage.removeItem('type');\n        this.props.history.push('/login');\n    }\n\n    render() {\n        const username = window.localStorage.getItem('username');\n        return (\n            <div>\n                <Menu\n                    theme=\"dark\"\n                    mode=\"horizontal\"\n                >    \n                    <Menu.Item>\n                        <img\n                            width={50}\n                            height={50}\n                            src=\"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png?x-oss-process=image/blur,r_50,s_50/quality,q_1/resize,m_mfit,h_200,w_200\"\n                        />\n                    </Menu.Item>\n                    <SubMenu key=\"3\"\n                        icon={<SettingOutlined />}\n                        title={`欢迎你，${username}`}\n                        style={{ float: 'right'}}\n                    >\n                        <Menu.Item\n                            key=\"setting:2\"\n                            onClick={() => { this.handleLogOut()}}\n                        >\n                                退出登录\n                        </Menu.Item>\n                    </SubMenu>\n                </Menu>\n            </div>\n        )\n    }\n}","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\login.js",["161"],"import actionType from '../actionType.js';\nimport APIS from '../../constants/api.js';\nimport $ajax from '../../utils/ajax';\nimport { message } from 'antd';\n\nconst actions = {\n    onLogin: params => dispatch => {\n        const options = {\n            method: 'post',\n            api: APIS.login,\n            params: params.formData,\n            contentType: 'json',\n        };\n        $ajax.common(options).then((res) => {\n            if (res.code === 10000) {\n                message.success(res.message);\n                dispatch({\n                    type: actionType.LOGIN,\n                    username: res.data.userName,\n                    type: res.data.type,\n                });\n                window.localStorage.setItem('userId', res.data.id);\n                window.localStorage.setItem('username', res.data.userName);\n                window.localStorage.setItem('type', res.data.type); \n                params.props.history.push('/home');\n            } else {\n                message.error({\n                    content: res.message,\n                    className: 'custom-class',\n                    style: {marginTop: '30vh'},\n                });\n            }\n            return res;\n        }).catch((e) => {\n            console.log(e);\n        })\n    },\n}\nexport default actions;","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\points.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\subjects.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\user.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\problems.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\papers.js",[],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":1,"column":1,"nodeType":"168","endLine":26,"endColumn":2},{"ruleId":"169","severity":1,"message":"170","line":147,"column":25,"nodeType":"171","endLine":150,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":156,"column":25,"nodeType":"171","endLine":159,"endColumn":27},{"ruleId":"172","severity":1,"message":"173","line":13,"column":5,"nodeType":"174","messageId":"175","endLine":13,"endColumn":11},{"ruleId":"172","severity":1,"message":"176","line":4,"column":5,"nodeType":"174","messageId":"175","endLine":4,"endColumn":10},{"ruleId":"172","severity":1,"message":"177","line":9,"column":5,"nodeType":"174","messageId":"175","endLine":9,"endColumn":8},{"ruleId":"178","severity":1,"message":"179","line":117,"column":25,"nodeType":"171","endLine":117,"endColumn":87},{"ruleId":"178","severity":1,"message":"179","line":119,"column":25,"nodeType":"171","endLine":119,"endColumn":91},{"ruleId":"172","severity":1,"message":"180","line":565,"column":44,"nodeType":"174","messageId":"175","endLine":565,"endColumn":55},{"ruleId":"181","severity":1,"message":"182","line":595,"column":17,"nodeType":"183","messageId":"184","endLine":595,"endColumn":23},{"ruleId":"172","severity":1,"message":"185","line":20,"column":8,"nodeType":"174","messageId":"175","endLine":20,"endColumn":14},{"ruleId":"166","severity":1,"message":"167","line":76,"column":1,"nodeType":"168","endLine":79,"endColumn":3},{"ruleId":"186","severity":1,"message":"187","line":15,"column":5,"nodeType":"188","messageId":"189","endLine":17,"endColumn":6},{"ruleId":"166","severity":1,"message":"190","line":7,"column":1,"nodeType":"168","endLine":30,"endColumn":2},{"ruleId":"186","severity":1,"message":"187","line":9,"column":9,"nodeType":"188","messageId":"189","endLine":11,"endColumn":10},{"ruleId":"172","severity":1,"message":"191","line":3,"column":27,"nodeType":"174","messageId":"175","endLine":3,"endColumn":41},{"ruleId":"172","severity":1,"message":"192","line":3,"column":43,"nodeType":"174","messageId":"175","endLine":3,"endColumn":56},{"ruleId":"169","severity":1,"message":"170","line":30,"column":25,"nodeType":"171","endLine":34,"endColumn":27},{"ruleId":"193","severity":1,"message":"194","line":20,"column":21,"nodeType":"195","messageId":"196","endLine":20,"endColumn":25},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","'Tag' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'problemType' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'papers' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Assign arrow function to a variable before exporting as module default","'LogoutOutlined' is defined but never used.","'LoginOutlined' is defined but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation"]