[{"F:\\Projects\\React学习\\test_paper_system\\src\\index.js":"1","F:\\Projects\\React学习\\test_paper_system\\src\\store\\reducers.js":"2","F:\\Projects\\React学习\\test_paper_system\\src\\App.jsx":"3","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actionType.js":"4","F:\\Projects\\React学习\\test_paper_system\\src\\routers\\route.jsx":"5","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\login\\index.jsx":"6","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\sign\\index.jsx":"7","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\home.jsx":"8","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemList.jsx":"9","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\subjects\\subjects.jsx":"10","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperList.jsx":"11","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperDetails.jsx":"12","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\points\\points.jsx":"13","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userPerson.jsx":"14","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions.js":"15","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userManage.jsx":"16","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemManage.jsx":"17","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperAutomatic.jsx":"18","F:\\Projects\\React学习\\test_paper_system\\src\\constants\\api.js":"19","F:\\Projects\\React学习\\test_paper_system\\src\\utils\\ajax.js":"20","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemSearch.jsx":"21","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\wrapComponent.jsx":"22","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\BaseForm.jsx":"23","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\RenderProblem.jsx":"24","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\nav\\index.jsx":"25","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\header\\index.jsx":"26","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\login.js":"27","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\points.js":"28","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\subjects.js":"29","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\user.js":"30","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\problems.js":"31","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\papers.js":"32"},{"size":590,"mtime":1610542394000,"results":"33","hashOfConfig":"34"},{"size":5816,"mtime":1619078370727,"results":"35","hashOfConfig":"34"},{"size":296,"mtime":1619023214148,"results":"36","hashOfConfig":"34"},{"size":722,"mtime":1619078315670,"results":"37","hashOfConfig":"34"},{"size":2191,"mtime":1610355099000,"results":"38","hashOfConfig":"34"},{"size":5637,"mtime":1619066866400,"results":"39","hashOfConfig":"34"},{"size":5767,"mtime":1619066500499,"results":"40","hashOfConfig":"34"},{"size":4935,"mtime":1619091691414,"results":"41","hashOfConfig":"34"},{"size":11015,"mtime":1619023730452,"results":"42","hashOfConfig":"34"},{"size":13461,"mtime":1619065964588,"results":"43","hashOfConfig":"34"},{"size":16478,"mtime":1619096147708,"results":"44","hashOfConfig":"34"},{"size":9775,"mtime":1618919294766,"results":"45","hashOfConfig":"34"},{"size":18470,"mtime":1619023418831,"results":"46","hashOfConfig":"34"},{"size":8600,"mtime":1619024397744,"results":"47","hashOfConfig":"34"},{"size":2961,"mtime":1610464965716,"results":"48","hashOfConfig":"34"},{"size":12899,"mtime":1619024340291,"results":"49","hashOfConfig":"34"},{"size":30255,"mtime":1619095080841,"results":"50","hashOfConfig":"34"},{"size":19330,"mtime":1619023892479,"results":"51","hashOfConfig":"34"},{"size":1667,"mtime":1619091415185,"results":"52","hashOfConfig":"34"},{"size":1934,"mtime":1610187595000,"results":"53","hashOfConfig":"34"},{"size":9810,"mtime":1618924886897,"results":"54","hashOfConfig":"34"},{"size":921,"mtime":1619022894348,"results":"55","hashOfConfig":"34"},{"size":435,"mtime":1609860035000,"results":"56","hashOfConfig":"34"},{"size":3982,"mtime":1618329564838,"results":"57","hashOfConfig":"34"},{"size":2411,"mtime":1619022944928,"results":"58","hashOfConfig":"34"},{"size":1868,"mtime":1619093665637,"results":"59","hashOfConfig":"34"},{"size":1297,"mtime":1615981391851,"results":"60","hashOfConfig":"34"},{"size":3641,"mtime":1616041697829,"results":"61","hashOfConfig":"34"},{"size":3645,"mtime":1616041686639,"results":"62","hashOfConfig":"34"},{"size":3467,"mtime":1616509046287,"results":"63","hashOfConfig":"34"},{"size":4332,"mtime":1617534684070,"results":"64","hashOfConfig":"34"},{"size":3685,"mtime":1619078654522,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"bqrvr0",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"F:\\Projects\\React学习\\test_paper_system\\src\\index.js",[],["142","143"],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\reducers.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\App.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actionType.js",["144"],"export default {\n    LOGIN: 'LOGIN',\n\n    GET_POINTS: 'GET_POINTS',\n    GET_ALL_POINTS: 'GET_ALL_POINTS',\n    ADD_POINT: 'ADD_POINT',\n    UPDATE_POINT: 'UPDATE_POINT',\n    \n    GET_SUBJECTS: 'GET_SUBJECTS',\n    GET_ALL_SUBJECTS: 'GET_ALL_SUBJECTS',\n    ADD_SUBJECT: 'ADD_SUBJECT',\n    UPDATE_SUBJECT: 'UPDATE_SUBJECT',\n\n    ADD_USER: 'ADD_USER',\n    UPDATE_USER: 'UPDATE_USER',\n    FORBID_USER: 'FORBID_USER',\n    MODIFY_USER: 'MODIFY_USER',\n\n    ADD_PROBLEM: 'ADD_PROBLEM',\n    GET_ALL_PROBLEM: 'GET_ALL_PROBLEM',\n    VIEW_PROBLEM: 'VIEW_PROBLEM',\n    DROP_PROBLEM: 'DROP_PROBLEM',\n    MODIFY_PROBLEM: 'MODIFY_PROBLEM',\n\n    DETAILS_PAPER: 'DETAILS_PAPER',\n    PAPER_LIST: 'PAPER_LIST',\n    MODIFY_PAPER: 'MODIFY_PAPER'\n}","F:\\Projects\\React学习\\test_paper_system\\src\\routers\\route.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\login\\index.jsx",["145"],"import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport login from '../../store/actions/login';\nimport {\n    Card,\n    Form,\n    Input,\n    Button,\n    Radio,\n    Row,\n    Col,\n    Divider,\n    message,\n } from 'antd';\nimport './index.css';\nimport APIS from '../../constants/api';\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 6, span: 10 },\n};\n\nconst rules = {\n    userName: [{\n        required: true,\n        message: '请输入用户名',\n    }],\n    passWord: [{\n        required: true,\n        message: '请输入密码',\n    }],\n    loginType: [{\n        required: true,\n        message: '请选择登录方式',\n    }],\n    verificationCode: [{\n        required: true,\n        message: '请输入验证码',\n    }]\n}\n\nclass app extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            verificationCode: '',\n            date: new Date(),\n        };\n    }\n\n    formRef = React.createRef();\n\n    handleChangeItem = (filde, value) => {\n        this.setState({\n            verificationCode: value,\n        });\n    }\n    onFinish = (values) => {\n        const { verificationCode } = this.state;\n        this.setState({\n            formData: {...values, verificationCode},\n        }, this.handleLogin);\n    }\n\n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n        message.error({\n            content: '请输入完整信息',\n            className: 'custom-class',\n            style: {marginTop: '30vh'},\n        });\n    };\n\n    onReset = () => {\n        this.formRef.current.resetFields();\n    };\n\n    handleLogin = () => {\n        const { onLogin } = this.props;\n        const { formData } = this.state;\n        onLogin({ formData, props: this.props });\n    }\n    render() {\n        const { formData, date, verificationCode } = this.state;\n        return (\n            <Card\n                title=\"欢迎登录邮易自动组卷系统\"\n                extra={<Link to='/signIn'>去注册</Link>}\n                id=\"login-container\"\n            >\n                 <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={formData}\n                    ref={this.formRef}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"用户名\"\n                        name=\"userName\"\n                        rules={rules.userName}\n                    >\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入用户名\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"密码\"\n                        name=\"passWord\"\n                        rules={rules.passWord}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入密码\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"账号类型\"\n                        name=\"type\"\n                        rules={rules.loginType}\n                    >\n                        <Radio.Group\n                            label=\"Radio.Group\"\n                            name=\"radio-group\"\n                        >\n                            <Radio value={0}>用户</Radio>\n                            <Radio value={1}>管理员</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        label=\"验证码\"\n                        name=\"verificationCode\"\n                    >\n                        <Input\n                            style={{width: 85}}\n                            placeholder=\"验证码\"\n                            value={verificationCode || undefined}\n                            onChange={(e) => this.handleChangeItem('verificationCode', e.target.value)}\n                        />\n                        <img\n                            style={{width: 100, marginLeft: 10, height: 32 }}\n                            src={`${APIS.verificationCode}?${date}`}\n                        />\n                    </Form.Item>\n                    \n                    <Divider dashed />\n\n                    <Form.Item {...tailLayout}>\n                        <Row>\n                            <Col span={4}>\n                                <Button\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                >\n                                    登录\n                                </Button>\n                            </Col>\n                            <Col span={4} offset={16}>\n                                <Button htmlType=\"button\" onClick={this.onReset}>\n                                    重置\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Item>\n                </Form>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    username: state.login.username,\n});\n \nconst mapDispatchToProps = dispatch => ({\n    onLogin: (params) => dispatch(login.onLogin(params)),\n});\n \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app);","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\sign\\index.jsx",["146"],"import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport {\n    Card,\n    Form,\n    Input,\n    Button,\n    Row,\n    Col,\n    Divider,\n    message,\n } from 'antd';\nimport $ajax from '../../utils/ajax';\nimport APIS from '../../constants/api';\nimport './index.css';\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 6, span: 10 },\n};\n\nconst rules = {\n    username: [{\n        required: true,\n        message: '请输入用户名',\n    }],\n    password: [{\n        required: true,\n        message: '请输入密码',\n    }],\n    againPassword: [{\n        required: true,\n        message: '请再次输入密码',\n    }]\n}\n\nexport default class app extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            message: '',\n            date: new Date(),\n        };\n    }\n\n    formRef = React.createRef();\n\n    handleChangeItem = (filde, value) => {\n        this.setState({\n            verificationCode: value,\n        });\n    }\n    onFinish = (values) => {\n        const { verificationCode } = this.state;\n        this.setState({\n            formData: {...values, type: 0, verificationCode},\n        }, this.onRegister);\n    };\n    \n    onRegister = () => {\n        const { formData } = this.state;\n        if( formData.againPassword !== formData.passWord) {\n            message.error({\n                content: '密码输入不一致！请重新输入',\n                className: 'custom-class',\n                style: {marginTop: '30vh'},\n            });\n        } else {\n            $ajax.common({\n                method: 'post',\n                api: APIS.userRegister,\n                params: formData,\n                contentType: 'json',\n            }).then(res => {\n                if (res.code === 10018 && res.success === true) { \n                    message.success(res.message);\n                    this.setState({\n                        message: <p style={{ marginLeft: 30, color: 'green'}}> { res.message }</p>,\n                    });\n                } else {\n                    this.setState({\n                        message: <p style={{ marginLeft: 30, color: 'red'}}> { res.message }</p>,\n                    });\n                }\n            }).catch(err => {\n                console.log(err);\n            });\n        }\n        \n    }\n\n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    onReset = () => {\n        this.formRef.current.resetFields();\n    };\n\n    render() {\n        const { formData, message, verificationCode, date } = this.state;\n        return (\n            <Card\n                title=\"欢迎注册\"\n                extra={<Link to='/login'>去登录</Link>}\n                id=\"signIn-container\"\n            >\n                 <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={formData}\n                    ref={this.formRef}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"用户名\"\n                        name=\"userName\"\n                        rules={rules.username}\n                    >\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入用户名\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"密码\"\n                        name=\"passWord\"\n                        rules={rules.password}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入密码\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"确认密码\"\n                        name=\"againPassword\"\n                        rules={rules.againPassword}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请再次输入密码\" />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"验证码\"\n                        name=\"verificationCode\"\n                    >\n                        <Input\n                            style={{width: 85}}\n                            placeholder=\"验证码\"\n                            value={verificationCode || undefined}\n                            onChange={(e) => this.handleChangeItem('verificationCode', e.target.value)}\n                        />\n                        <img\n                            style={{width: 100, marginLeft: 10, height: 32 }}\n                            src={`${APIS.verificationCode}?${date}`}\n                        />\n                    </Form.Item>\n                    { message }\n                    <Divider dashed />\n\n                    <Form.Item {...tailLayout}>\n                        <Row>\n                            <Col span={4}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    注册\n                                </Button>\n                            </Col>\n                            <Col span={4} offset={16}>\n                                <Button htmlType=\"button\" onClick={this.onReset}>\n                                    重置\n                                </Button>\n                            </Col>\n                        </Row>                      \n                    </Form.Item>\n                </Form>\n            </Card>\n        )\n    }\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\home.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemList.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\subjects\\subjects.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperList.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperDetails.jsx",["147"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Breadcrumb,\n    Layout,\n    Card,\n    Table,\n    Form,\n    Space,\n    Button,\n    Alert,\n    Modal,\n    Select,\n    DatePicker,\n    Input,\n} from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport locale from 'antd/lib/date-picker/locale/zh_CN';\nimport 'moment/locale/zh-cn';\nimport RenderProblem from '../component/RenderProblem';\nimport papers from \"../../../../store/actions/papers\";\nimport WrappedComponent from '../component/wrapComponent';\nconst { Content } = Layout;\nconst { confirm } = Modal;\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 14 },\n};\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            modalFormDate: {},\n        }\n    }\n    componentDidMount(){\n        const { detailsPaper } = this.props;\n        const examId = this.props.history.location.search.slice(4);\n        detailsPaper({examId});\n    }\n    getTestPaPaerColumns = () => {\n        return [{\n            title: '试卷名称',\n            dataIndex: 'testPaperName',\n            key: 'testPaperName',\n        },{\n            title: '所属课程',\n            dataIndex: 'subject',\n            key: 'subject',\n        },  {\n            title: '开始时间',\n            dataIndex: 'startTime',\n            key: 'startTime',\n        }, {\n            title: '结束时间',\n            dataIndex: 'endTime',\n            key: 'endTime',\n        }]\n    }\n    getResultColumns = () => {\n        return [\n            {\n                title: '适应度',\n                dataIndex: 'fitness',\n                key: 'fitness',\n            }, {\n                title: '试卷难度系数',\n                dataIndex: 'difficulty',\n                key: 'difficulty',\n            }, {\n                title: '知识点覆盖率',\n                dataIndex: 'pointCoverage',\n                key: 'pointCoverage',\n            }, {\n                title: '题目总数',\n                dataIndex: 'problemNum',\n                key: 'problemNum',\n            }, {\n                title: '试卷总分',\n                dataIndex: 'score',\n                key: 'score',\n            }\n        ]\n    }\n\n    onChangeItem = (filed, val) => {\n        console.log('正确答案不允许修改');\n        return;\n    }\n\n    // 修改试卷\n    onModifyTestPaper = (record) => {\n        let tempRecord = record;\n        tempRecord.startTime = moment(record.startTime,'YYYY-MM-DD HH:mm:ss');\n        tempRecord.endTime = moment(record.endTime,'YYYY-MM-DD HH:mm:ss');\n        confirm({\n            title: '修改试卷信息',\n            icon: <ExclamationCircleOutlined />,\n            content: (\n                <Form\n                    {...layout}\n                    name=\"basic\"\n                    layout=\"Horizontal\"\n                    initialValues={tempRecord}\n                >\n                    <Form.Item\n                        label=\"试卷名称\"\n                        name=\"testPaperName\"\n                    >\n                        <Input\n                            placeholder=\"请输入试卷名称\"\n                            value={tempRecord.testPaperName}\n                            onChange={ (e) => { this.handleChangeModalItem('testPaperName', e)}}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"开始时间\"\n                        name=\"startTime\"\n                    >\n                        <DatePicker\n                            showTime\n                            format=\"YYYY-MM-DD HH:mm:ss\"\n                            value={tempRecord.startTime}\n                            locale={locale}\n                            onChange={ (time, timeString) => { this.handleChangeModalItem('startTime', timeString)}}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"结束时间\"\n                        name=\"endTime\"\n                    >\n                        <DatePicker\n                            showTime\n                            format=\"YYYY-MM-DD HH:mm:ss\"\n                            value={tempRecord.endTime}\n                            locale={locale}\n                            onChange={ (time, timeString) => { this.handleChangeModalItem('endTime', timeString)}}\n                        />\n                    </Form.Item>\n                </Form>\n            ),\n            style: { marginTop: 150 },\n            okText: '保存',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => {\n                this.onOkModify(record);\n            },\n            onCancel: () => {\n                console.log('不保存')\n            },\n        })\n    }\n\n    // 修改试卷内容字段\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { modalFormDate } = this.state;\n        const tempModalFormDate = Object.assign({}, modalFormDate, { [filedName]: value });\n        this.setState({\n            modalFormDate: tempModalFormDate,\n        });\n    }\n    \n    // 确认修改\n    onOkModify = (record) => {\n        const { modalFormDate } = this.state;\n        // 请求返回之后，modalFormDate清空\n        console.log(modalFormDate);\n    }\n\n    render() {\n        const { paperAttribute, problemList, paperDetails } = this.props;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试题管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试卷详情</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background test-paper-details\"\n                    >\n                        <Alert message=\"由于组卷过程较慢，请等待组卷结果。\" type=\"warning\" showIcon closable />\n                        <Card\n                            style={{ marginTop: 20}}\n                            title=\"组卷结果\"\n                        >\n                                <Table\n                                    columns={this.getResultColumns()}\n                                    dataSource={[].concat(paperAttribute)}\n                                    pagination={false}\n                                />\n                        </Card>\n                        <Card\n                            title=\"试卷信息\"\n                            style={{ marginTop: 20}}\n                            extra={\n                            <Space size={50}>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() => this.onModifyTestPaper(paperDetails)}\n                                >\n                                    修改试卷信息\n                                </Button>\n                            </Space>\n                        }>\n                                <Table\n                                    columns={this.getTestPaPaerColumns()}\n                                    dataSource={[].concat(paperDetails)}\n                                    pagination={false}\n                                />\n                        </Card>\n                        <Alert\n                            style={{ marginTop: 10 }}\n                            message=\"题目信息仅为展示，不可修改。若要修改，请前往题目管理，进行修改。\"\n                            type=\"warning\"\n                            showIcon\n                            closable\n                        />\n                        <Card\n                            title=\"题目信息\"\n                            style={{ marginTop: 10}}\n                                \n                        >\n                            <Form>\n                                {\n                                    problemList.map((item, index) => {\n                                        return(\n                                            <Form.Item\n                                                label=\"\"\n                                                name={item.answer}\n                                                key={item.problemText}\n                                            >\n                                                {index + 1}.{item.problemText} ({item.score}分)\n                                                <RenderProblem\n                                                    field={item}\n                                                    onChangeItem={this.onChangeItem}\n                                                />\n                                            </Form.Item>\n                                        )\n                                    })\n                                }\n                            </Form>\n                        </Card>\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    paperAttribute: state.papers.paperAttribute,\n    paperDetails: state.papers.paperDetails,\n    problemList: state.papers.problemList,\n});\n \nconst mapDispatchToProps = dispatch => ({\n    detailsPaper: (params) => dispatch(papers.detailsPaper(params)),\n});\n \nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\points\\points.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userPerson.jsx",["148","149"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Table,\n    Form,\n    Space,\n    Breadcrumb,\n    Layout,\n    Tag,\n    Input,\n    Button,\n    Card,\n    message,\n    Alert,\n} from 'antd';\nimport user from '../../../../store/actions/user';\nimport WrappedComponent from '../component/wrapComponent';\nconst { Content } = Layout;\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            usernameDisabled: true,\n            passwordDisabled: true,\n        }\n    }\n\n    formRef = React.createRef();\n\n    onFinish = (values) => {\n        console.log('Success:', values);\n        const { passwordDisabled } = this.state;\n        if(!passwordDisabled && (values.againPassword !== values.passWord)){\n            message.error({\n                content: '输入密码不一致，请重新输入',\n                className: 'custom-class',\n                style: {marginTop: '30vh'},\n            });\n            values = \"\";\n        }\n        this.savePersonChange(values);\n      };\n    \n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    // 保存修改\n    savePersonChange = (values) => {\n        const { modifyUser } = this.props;\n        console.log(\"values,|||\", values);\n        if (values) {\n            modifyUser({...values, id: window.localStorage.getItem('userId')});\n            setTimeout( () => {\n                const { userModifySuccess } = this.props;\n                if(userModifySuccess) {\n                    this.setState({\n                        usernameDisabled: true,\n                        passwordDisabled: true,\n                    })\n                }\n                window.localStorage.removeItem('username');\n                window.localStorage.removeItem('userId');\n                window.localStorage.removeItem('type');\n                this.props.history.push('/login');\n            }, 500);\n        }\n    }\n\n    // 取消保存\n    cancalSavePersonChange = () => {\n        this.formRef.current.resetFields();\n        this.setState({\n            usernameDisabled: true,\n            passwordDisabled: true,\n        })\n    }\n\n    render() {\n        const { usernameDisabled, passwordDisabled } = this.state;\n        return (\n            <div style={{ padding: 10 }} className=\"user-content\">\n                <Card\n                    title={\n                        <Breadcrumb style={{ margin: '16px 0' }}>\n                            <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                            <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                            <Breadcrumb.Item>账号管理</Breadcrumb.Item>\n                            <Breadcrumb.Item>个人中心</Breadcrumb.Item>\n                        </Breadcrumb>\n                    }\n                >\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Card\n                            style={{ width: '80%' }}\n                            title=\"修改个人信息\"\n                            extra={\n                                <Space>\n                                    <Button\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                usernameDisabled: false,\n                                            });\n                                        }}\n                                    >\n                                        修改用户名\n                                    </Button>\n                                    <Button\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                passwordDisabled: false,\n                                            });\n                                        }}\n                                    >\n                                        修改密码\n                                    </Button>\n                                </Space>\n                            }\n                        >\n                            <Alert\n                                message=\"注意修改个人信息之后，会退出系统需重新登录\"\n                                type=\"warning\"\n                                showIcon\n                                closable\n                            />\n                            <Form\n                                {...layout}\n                                name=\"basic\"\n                                layout=\"Vertical\"\n                                style={{ width: '70%', marginTop: 40 }}\n                                className=\"person-form\"\n                                onFinish={this.onFinish}\n                                onFinishFailed={this.onFinishFailed}\n                                ref={this.formRef}\n                            >\n                                <Form.Item\n                                    label=\"用户名\"\n                                    name=\"userName\"\n                                    rules={[{ required: !this.state.usernameDisabled, message: '请输入新用户名' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入新用户名\"\n                                        defaultValue={window.localStorage.getItem('username')}\n                                        disabled={usernameDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"密码\"\n                                    name=\"passWord\"\n                                    rules={[{ required: !this.state.passwordDisabled, message: '请输入新密码' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入新密码\"\n                                        disabled={passwordDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"确认密码\"\n                                    name=\"againPassword\"\n                                    rules={[{ required: !this.state.passwordDisabled, message: '请再次输入新密码' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请再次输入新密码\"\n                                        disabled={passwordDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item wrapperCol={{ offset: 8 }}>\n                                    <Space size={50}>\n                                        <Button\n                                            disabled={usernameDisabled && passwordDisabled}\n                                            onClick={() => { this.cancalSavePersonChange()}}\n                                        >\n                                            取消\n                                        </Button>\n                                        <Button\n                                            type=\"primary\"\n                                            htmlType=\"submit\"\n                                            onClick={ () => { this.savePersonChange()}}\n                                            disabled={usernameDisabled && passwordDisabled}\n                                        >\n                                            保存\n                                        </Button>\n                                    </Space>\n                                </Form.Item>\n                            </Form>\n                        </Card>\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return ({\n        userModifySuccess: state.users.userModifySuccess,\n    })\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    modifyUser: params => dispatch(user.modifyUser(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userManage.jsx",["150","151"],"import React, { Component } from 'react';\nimport {\n    Table,\n    Form,\n    Space,\n    Breadcrumb,\n    Layout,\n    Tag,\n    Input,\n    Button,\n    Card,\n    Modal,\n    Pagination,\n} from 'antd';\nimport { connect } from 'react-redux';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport WrappedComponent from '../component/wrapComponent';\nimport user from '../../../../store/actions/user';\nimport $ajax from '../../../../utils/ajax';\nimport APIS from '../../../../constants/api';\nimport '../index.css';\nconst { Content } = Layout;\nconst { confirm } = Modal;\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            modalFormDate: {},\n            pageSize: 10,\n            pageNum: 1,\n            totalCount: 100,\n            tableData: [],\n        }\n    }\n\n    // 删除用户\n    // onDelUser = (id) => {\n    //     confirm({\n    //         title: '系统提示',\n    //         icon: <ExclamationCircleOutlined />,\n    //         content: `确定要删除用户${id}吗？`,\n    //         style: { marginTop: 150 },\n    //         okText: '确认',\n    //         okType: 'danger',\n    //         cancelText: '取消',\n    //         onOk() {\n    //           console.log('OK');\n    //         },\n    //         onCancel() {\n    //           console.log('Cancel');\n    //         },\n    //       });\n    // }\n\n    // 禁用或启用用户\n    onDisableUser = (id, auth) => {\n        confirm({\n            title: '系统提示',\n            icon: <ExclamationCircleOutlined />,\n            content:`注意禁用后用户将不能再登录系统，启用后可继续使用确定要${auth ? '启用' : '禁用'}用户${id}吗？`,\n            style: { marginTop: 150 },\n            okText: '确认',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => {\n                // 确认之后，直接返回登录页\n                const { forbidUser } = this.props;\n                forbidUser({id, status: +(!auth)});\n                setTimeout( () => {\n                    const { userForbidSuccess } = this.props;\n                    if (userForbidSuccess) {\n                        this.handleGetUserList();\n                    }\n                }, 500);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n          });\n    }\n    getColumns = () => {\n        return [\n            {\n                title: 'ID',\n                dataIndex: 'id',\n                key: 'id',\n            },\n            {\n                title: '用户名',\n                dataIndex: 'userName',\n                key: 'userName',\n            },\n            {\n                title: '身份类型',\n                dataIndex: 'type',\n                key: 'type',\n                render: (text, record) => (\n                    <Tag color={record.type ?'volcano': 'cyan'}>{record.type ? '管理员': '用户'}</Tag>\n                )\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'createTime',\n                key: 'createTime',\n            },\n            {\n                title: '最后一次登录时间',\n                dataIndex: 'lastLogTime',\n                key: 'lastLogTime',\n            },\n            {\n                title: '操作',\n                key: '',\n                render: (text, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={ () => { this.userManageModal('modify', record)}}>修改用户信息</a>\n                        {/* <a onClick={() => {this.onDelUser(record.id)}}>删除</a> */}\n                        <a onClick={() => {this.onDisableUser(record.id, record.status)}}>\n                            {\n                                record.status ?\n                                '启用' :\n                                '禁用' \n                            }\n                        </a>\n                    </Space>\n                ),\n              },\n          ];\n    }\n\n    componentDidMount(){\n        this.handleGetUserList();\n    }\n\n    handleGetUserList = () => {\n        const { pageSize, pageNum } = this.state;\n        const params = {\n            pageSize,\n            currentPage: pageNum,\n        };\n        $ajax.common({\n            method: 'get',\n            api: APIS.getUserList,\n            params,\n            contentType: 'json',\n        }).then(res => {\n            if (res.code === 10000 && res.success === true) { \n                const { currentPage, totalCount, dataList, size } = res.data;\n                this.setState({\n                    pageSize: size,\n                    pageNum: currentPage,\n                    totalCount: totalCount,\n                    tableData: dataList,\n                })\n            }\n        }).catch(err => {\n            console.log('err------',err);\n        })\n    }\n\n    onChangePage = (page, pageSize) => {\n        this.setState({\n            currentPage: page,\n            pageSize,\n        }, this.handleGetUserList);\n    }\n\n    handleChangeItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { formData } = this.state;\n        const tempFormDate = Object.assign({}, formData, { [filedName]: value });\n        this.setState({\n            formData: tempFormDate,\n        });\n    }\n\n\n    onSubmit = () => {\n        console.log('submit提交表单',this.state.formData);\n    }\n\n\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { modalFormDate } = this.state;\n        const tempModalFormDate = Object.assign({}, modalFormDate, { [filedName]: value });\n        this.setState({\n            modalFormDate: tempModalFormDate,\n        });\n    }\n    // 确认添加或修改\n    onOkModify = (type, record) => {\n        const { modalFormDate } = this.state;\n        const { addUser, updateUser} = this.props;\n        if(type === 'add') {\n            console.log('新增数据', type, modalFormDate);\n            addUser(modalFormDate);\n            setTimeout( () => {\n                // 请求返回之后，modalFormDate清空\n                const { userAddSuccess } = this.props;\n                if (userAddSuccess) {\n                    const tempFormData = modalFormDate;\n                    tempFormData.userName = '';\n                    tempFormData.passWord = '';\n                    this.setState({\n                        modalFormDate: tempFormData,\n                    }, () => {\n                        this.handleGetUserList();\n                    });\n                }\n            }, 500);\n        }\n        if( type === 'modify'){\n            const tempModalFormDate = Object.assign({}, record, modalFormDate,);\n            console.log('修改数据',type,tempModalFormDate);\n            // 请求返回之后，modalFormDate清空\n            updateUser(tempModalFormDate);\n            setTimeout(() => {\n                const { userUpdateSuccess } = this.props;\n                if (userUpdateSuccess) {\n                    const tempFormData = tempModalFormDate;\n                    tempFormData.userName = '';\n                    tempFormData.passWord = '';\n                    this.setState({\n                        modalFormDate: tempFormData,\n                    }, () => {\n                        this.handleGetUserList();\n                    });\n                }\n            }, 500);\n        }\n    }\n\n    // 添加或修改弹窗\n    userManageModal = (type, record) => {\n        const { modalFormDate } = this.state;\n        return (\n            confirm({\n                title: type === 'modify' ? '修改用户信息' : '增加用户',\n                icon: <ExclamationCircleOutlined />,\n                content: (\n                    <Form\n                        name=\"basic\"\n                        layout=\"Horizontal\"\n                        initialValues={record}\n                    >\n                        <Form.Item\n                            label={type === 'add' ? \"初始用户名\": \"修改用户名\"}\n                            name=\"userName\"\n                        >\n                            <Input\n                                placeholder=\"请输入用户名\"\n                                value={modalFormDate.userName}\n                                onChange={ (e) => { this.handleChangeModalItem('userName', e.target.value)}}\n                            />\n                        </Form.Item>\n                        <Form.Item\n                            label={type === 'add' ? \"初始密码\": \"重置密码\"}\n                            name=\"passWord\"\n                        >\n                            <Input\n                                placeholder=\"请输入密码\"\n                                value={modalFormDate.passWord}\n                                onChange={ (e) => { this.handleChangeModalItem('passWord', e.target.value)}}\n                            />\n                        </Form.Item>\n                    </Form>\n                ),\n                style: { marginTop: 150 },\n                okText: '保存',\n                okType: 'danger',\n                cancelText: '取消',\n                onOk: () => {\n                    this.onOkModify(type, record);\n                },\n                onCancel: () => {\n                    console.log('不保存')\n                },\n            })      \n        )\n    }\n\n    render() {\n        const { modalFormDate, pageSize, pageNum, totalCount, tableData } = this.state;\n        return (\n            <div style={{ padding: 10 }} className=\"user-manager-content\">\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>账号管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>用户管理</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Form\n                            name=\"basic\"\n                            layout=\"inline\"\n                        >\n                            <Form.Item\n                                label=\"用户名\"\n                                name=\"userName\"\n                            >\n                                <Input\n                                    placeholder=\"请输入用户名\"\n                                    value={modalFormDate.userName}\n                                    onChange={ (e) => { this.handleChangeModalItem('userName', e)}}\n                                />\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\" onClick={this.onSubmit}>\n                                    查询\n                                </Button>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={ () => { this.userManageModal('add', modalFormDate)}}\n                                >\n                                    添加用户\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    \n                        <Table\n                            style={{ marginTop: 20 }}\n                            bordered\n                            columns={this.getColumns()}\n                            dataSource={tableData}\n                            pagination={false}\n                        />\n                        <Pagination\n                            style={{ float: 'right', marginTop: 20}}\n                            showQuickJumper\n                            current={pageNum}\n                            total={totalCount}\n                            pageSize={pageSize}\n                            onChange={this.onChangePage}\n                        />\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return ({\n        userAddSuccess: state.users.userAddSuccess,\n        userUpdateSuccess: state.users.userUpdateSuccess,\n        userForbidSuccess: state.users.userForbidSuccess,\n    })\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    addUser: params => dispatch(user.addUser(params)),\n    updateUser: params => dispatch(user.updateUser(params)),\n    forbidUser: params => dispatch(user.forbidUser(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemManage.jsx",["152","153"],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperAutomatic.jsx",["154"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n    Breadcrumb,\n    Layout,\n    Card,\n    Form,\n    Input,\n    Button,\n    Select,\n    Table,\n    Space,\n    DatePicker,\n    message,\n} from 'antd';\nimport BaseForm from '../component/BaseForm';\nimport points from '../../../../store/actions/points';\nimport subjects from '../../../../store/actions/subjects';\nimport papers from \"../../../../store/actions/papers\";\nimport WrappedComponent from '../component/wrapComponent';\nimport './index.css';\nimport locale from 'antd/lib/date-picker/locale/zh_CN';\nimport 'moment/locale/zh-cn';\nimport $ajax from '../../../../utils/ajax';\nimport APIS from '../../../../constants/api';\nconst { Content } = Layout;\nconst { Option }  = Select;\n\nconst data = [{\n    key: 1,\n    problemType: 'choice',\n    problemTypeText: `选择题`,\n    problemTypeNum: '',\n    problemTypeScore: '',\n},{\n    key: 2,\n    problemType: 'judgement',\n    problemTypeText: `判断题`,\n    problemTypeNum: '',\n    problemTypeScore: '',\n},{\n    key: 3,\n    problemType: 'multiple',\n    problemTypeText: `多选题`,\n    problemTypeNum: '',\n    problemTypeScore: '',\n},{\n    key: 4,\n    problemType: 'blank',\n    problemTypeText: `填空题`,\n    problemTypeNum: '',\n    problemTypeScore: '',\n},{\n    key: 5,\n    problemType: 'shortAnswer',\n    problemTypeText: `简答题`,\n    problemTypeNum: '',\n    problemTypeScore: '',\n}];\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            selectedRowKeys: [],\n            testPaperInfo: {},\n            problemTypeInfo: [],\n            check: {},\n        }\n    }\n\n    componentDidMount(){\n        const { getSubjects } = this.props;\n        getSubjects();\n    }\n\n    myForm = React.createRef('myForm');\n\n    getColumns = () => {\n        const { check } = this.state;\n        return [\n            {\n                title: '题型',\n                dataIndex: 'problemTypeText',\n                width: 50,\n            },\n            {\n                title: '题目数量',\n                dataIndex: 'problemTypeNum',\n                width: 150,\n                render: (text, record) => {\n                    const { selectedRowKeys } = this.state;\n                    return (\n                        <BaseForm\n                            warning={check.problemTypeNum}\n                            required={selectedRowKeys.indexOf(record.key) !== -1}\n                        >\n                            <Input\n                                placeholder=\"请输入题目数量\"\n                                onChange={(e) => this.onChangeProblemItem('problemTypeNum', record, e.target.value)}\n                                disabled={selectedRowKeys.indexOf(record.key) === -1}\n                            />\n                        </BaseForm>\n                    )\n                }\n            },\n            {\n                title: '每题分数',\n                dataIndex: 'problemTypeScore',\n                width: 150,\n                render: (text, record) => {\n                    const { selectedRowKeys } = this.state;\n                    return(\n                        <BaseForm\n                            warning={check.problemTypeScore}\n                            required={selectedRowKeys.indexOf(record.key) !== -1}\n                        >\n                            <Input\n                                placeholder=\"请输入此类题型的分数\"\n                                onChange={(e) => this.onChangeProblemItem('problemTypeScore', record, e.target.value)}\n                                disabled={selectedRowKeys.indexOf(record.key) === -1}\n                            />\n                        </BaseForm>\n                    )\n                }\n            },\n        ];\n    }\n\n    // 题目与分数的关联\n    onChangeProblemItem = (filed, record, value) => {\n        const { problemTypeInfo } = this.state;\n        const tempProblemTypeInfo = problemTypeInfo;\n        tempProblemTypeInfo.forEach(item => {\n            if (item.key === record.key) {\n                if (filed === 'problemTypeNum') {\n                    item.problemTypeNum = parseInt(value) || 0;\n                }\n                if (filed === 'problemTypeScore'){\n                    item.problemTypeScore = parseInt(value) || 0;\n                }\n            }\n        });\n        this.setState({\n            problemTypeInfo: tempProblemTypeInfo,\n        });\n    }\n\n    // 选择题型\n    onSelectChange = selectedRowKeys => {\n        this.setState({ selectedRowKeys });\n        const tempProblemTypeInfo = [];\n        data.forEach((item) => {\n            selectedRowKeys.forEach(val => {\n                if (item.key === val) {\n                    tempProblemTypeInfo.push(item);\n                }\n            })\n        });\n        this.setState({\n            problemTypeInfo: tempProblemTypeInfo,\n        });\n    };\n\n    // 处理单个字段变更\n    onFieldsChange = (filedName, value) => {\n        const { testPaperInfo } = this.state;\n        const tempTestPaperInfo = Object.assign({}, testPaperInfo, { [filedName]: value });\n        if(filedName === 'subjectId'){\n            tempTestPaperInfo.points = [];\n            const { getPoints } = this.props;\n            getPoints({subjectId: value});\n        }\n        this.setState({\n            testPaperInfo: tempTestPaperInfo,\n        });\n    }\n\n    // 重置\n    resetForm = () => {\n        this.myForm.current.resetFields();\n        this.setState({\n            check: {},\n            selectedRowKeys: [],\n        })\n    }\n\n    onCheck = () => {\n        const { check, testPaperInfo, selectedRowKeys } = this.state;\n        const {\n            examName,\n            startTime,\n            endTime,\n            subjectId,\n            points,\n            difficulty,\n            problemTypeInfo,\n        } = testPaperInfo;\n        check.examName = !examName ? '请输入试卷名称' : '';\n        check.startTime = !startTime ? '请选择考试开始时间' : '';\n        check.endTime = !endTime ? '请输入考试结束时间': '';\n        check.subject = !subjectId ? '请选择课程' : '';\n        check.points = !points ? '请选择选择包含知识点' : '';\n        check.difficulty = !difficulty ? '请输入试卷难度' : '';\n        problemTypeInfo.forEach((item) => {\n            selectedRowKeys.forEach(val => {\n                if (item.key === val) {\n                    check.problemTypeNum = !item.problemTypeNum ? '请输入题目数量' : '';\n                    check.problemTypeScore = !item.problemTypeScore ? '请输入此类题目的分数' : '';\n                }\n            })\n        });\n        this.setState({\n            check,\n        });\n        return check;\n    }\n\n    // 开始组卷\n    startAutomatic = () => {\n        console.log('开始组卷');\n        const { testPaperInfo, problemTypeInfo } = this.state;\n        const tempTestPaperInfo = testPaperInfo;\n        tempTestPaperInfo.problemTypeInfo = problemTypeInfo;\n        this.setState({\n            testPaperInfo: tempTestPaperInfo,\n        }, () => {\n            const check = this.onCheck();\n            const { testPaperInfo } = this.state;\n            if (Object.values(check).filter((item) => !!item).length > 0) return null;\n            if (testPaperInfo.problemTypeInfo.length === 0) {\n                message.error({\n                    content: '请先选择试卷包含题型，再开始组卷!',\n                    className: 'custom-class',\n                    style: {marginTop: '30vh'},\n                });\n            }\n            $ajax.common({\n                method: 'post',\n                api: APIS.automaticPaper,\n                params: {...testPaperInfo, userId: window.localStorage.getItem('userId')},\n                contentType: 'json',\n            }).then(res => {\n                if (res.code === 10000 && res.success === true) { \n                    this.props.history.push(`/testPaperDetails?id=${res.data}`);\n                } else {\n                    message.error({\n                        content: res.message,\n                        className: 'custom-class',\n                        style: {marginTop: '30vh'},\n                    });\n                }\n            }).catch(err => {\n                console.log(err);\n            });\n        });\n    }\n\n    render() {\n        const { selectedRowKeys, check, testPaperInfo } = this.state;\n        const { pointsList, subjectsList } = this.props;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n\n        return (\n            <div style={{ padding: 10 }} className=\"test-paper-automatic-content\">\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试题管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>自动组卷</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background test-paper-automatic\"\n                    >\n                       <Card title=\"开始组卷\"  extra={\n                           <Link to=\"/testPaperList\">历史组卷列表</Link>\n                       }>\n                            <Form\n                                ref={this.myForm}\n                                className=\"test-paper-form\"\n                            >\n                                 <Form.Item\n                                    label=\"考试名称\"\n                                    name=\"examName\"\n                                    required\n                                >\n                                    <BaseForm\n                                        warning={check.examName}\n                                        required={true}\n                                    >\n                                        <Input\n                                            placeholder=\"请输入考试名称\"\n                                            alue={testPaperInfo.examName}\n                                            onChange={(e) => { this.onFieldsChange('examName', e.target.value)}}\n                                        />\n                                    </BaseForm>\n                                </Form.Item>\n                                \n                                <Form.Item\n                                    label=\"考试开始时间\"\n                                    name=\"startTime\"\n                                    required\n                                >\n                                    <BaseForm\n                                        warning={check.startTime}\n                                        required={true}\n                                    >\n                                        <DatePicker\n                                            showTime\n                                            locale={locale}\n                                            format=\"YYYY-MM-DD HH:mm:ss\"\n                                            placeholder=\"请选择考试开始时间\"\n                                            style={{ width: '100%' }}\n                                            onChange={(time, timeString) => { this.onFieldsChange('startTime', timeString)}}\n                                        />\n                                    </BaseForm>\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"考试结束时间\"\n                                    name=\"endTime\"\n                                    required\n                                >\n                                    <BaseForm\n                                        warning={check.endTime}\n                                        required={true}\n                                    >\n                                        <DatePicker\n                                            showTime\n                                            locale={locale}\n                                            format=\"YYYY-MM-DD HH:mm:ss\"\n                                            placeholder=\"请选择考试结束时间\"\n                                            style={{ width: '100%' }}\n                                            onChange={(time, timeString) => { this.onFieldsChange('endTime', timeString)}}\n                                        />\n                                    </BaseForm>\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"选择课程\"\n                                    name=\"subjectId\"\n                                    required\n                                >\n                                    <BaseForm\n                                        warning={check.subject}\n                                        required={true}\n                                    >\n                                        <Select\n                                            placeholder=\"请选择课程\"\n                                            value={testPaperInfo.subjectId}\n                                            onChange={(e) => { this.onFieldsChange('subjectId', e)}}\n                                        >\n                                            {\n                                                subjectsList.map(item => (\n                                                    <Option\n                                                        value={item.subjectId}\n                                                        key={`subject_${item.subjectId}`}\n                                                    >\n                                                        {item.subjectName}\n                                                    </Option>\n                                                ))\n                                            }\n                                        </Select>\n                                    </BaseForm>\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"选择包含知识点\"\n                                    name=\"points\"\n                                    required\n                                >\n                                    <BaseForm\n                                        warning={check.points}\n                                        required={true}\n                                    >\n                                        <Select\n                                            mode=\"multiple\"\n                                            allowClear\n                                            placeholder=\"请选择试卷所包含的知识点\"\n                                            value={testPaperInfo.points}\n                                            onChange={(e) => { this.onFieldsChange('points', e)}}\n                                            disabled={!testPaperInfo.subjectId ? true : false}\n                                        >\n                                            {\n                                                pointsList.map(item => {\n                                                    return (\n                                                        <Option\n                                                            value={item.pointId}\n                                                            key={`pointId_${item.pointId}`}\n                                                        >\n                                                            {item.pointName}\n                                                        </Option>\n                                                    )\n                                                })\n                                            }\n                                        </Select>\n                                    </BaseForm>\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"期望试卷难度\"\n                                    name=\"difficulty\"\n                                    required\n                                >\n                                    <BaseForm\n                                        warning={check.difficulty}\n                                        required={true}\n                                    >\n                                        <Input\n                                            value={testPaperInfo.difficulty}\n                                            placeholder=\"请输入试卷难度（0~1）\"\n                                            onChange={(e) => { this.onFieldsChange('difficulty', e.target.value)}}\n                                        />\n                                    </BaseForm>\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"试卷包含题型\"\n                                    name=\"problemType\"\n                                    required\n                                >\n                                    <Table\n                                        rowSelection={rowSelection}\n                                        columns={this.getColumns()}\n                                        dataSource={data}\n                                        pagination={false}\n                                        bordered\n                                    />\n                                </Form.Item>\n\n                                <Form.Item wrapperCol={{ offset: 8 }} style={{ marginTop: 30 }}>\n                                    <Space size={50}>\n                                        <Button\n                                            onClick={() => { this.resetForm()}}\n                                        >\n                                            重置\n                                        </Button>\n                                        <Button\n                                            type=\"primary\"\n                                            htmlType=\"submit\"\n                                            onClick={ () => { this.startAutomatic()}}\n                                        >\n                                            开始组卷\n                                        </Button>\n                                    </Space>\n                                </Form.Item>\n                            </Form>\n                       </Card>\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    pointsList: state.points.pointsList,\n    subjectsList: state.subjects.subjectsList,\n});\n \nconst mapDispatchToProps = dispatch => ({\n    getPoints: (params) => dispatch(points.getPoints(params)),\n    getSubjects: (params) => dispatch(subjects.getSubjects(params)),\n});\n \nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\constants\\api.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\utils\\ajax.js",["155"],"import axios from 'axios';\nimport { message } from 'antd';\naxios.defaults.withCredentials = true;\naxios.interceptors.request.use((config) => {\n    // if (config.headers['Content-Type'] !== 'application/json') {\n    //     config.data = JSON.stringify(config.data);\n    // }\n    return config;\n}, error => Promise.reject(error));\n\nconst contentTypeMap = {\n    json: 'application/json',\n    form: 'application/x-www-form-urlencoded',\n    file: 'multipart/form-data',\n};\n\nexport function ajax({\n    method = 'get',\n    api,\n    params,\n    contentType = 'form',\n}) {\n    const headers = {\n        'Content-Type': contentTypeMap[contentType] || 'application/x-www-form-urlencoded',\n    };\n\n    let config;\n    let callerFunc;\n    if (method === 'post') {\n        config = {\n            headers,\n        };\n        callerFunc = axios.post;\n    } else if (method === 'get') {\n        params = {\n            params,\n            headers,\n        };\n        callerFunc = axios.get;\n    } else {\n        callerFunc = () => {\n            throw new Error(`当前方法${method}暂不支持`);\n        };\n    }\n    return callerFunc(api, params, config).then((response) => {\n        const { status, data } = response;\n\n        if (status === 200) {\n            const res = data;\n            if (typeof res === 'string') {\n                message.error('返回值解析错误');\n            } else {\n                return res;\n            }\n        } else {\n            message.error('网络请求失败');\n        }\n        return undefined;\n    }).catch((e) => {\n        console.log(e);\n    });\n}\n\nexport function ajaxFile({ api, params }) {\n    const formData = new FormData();\n    formData.append('file', params.file);\n    const config = {\n        method: 'post',\n        body: formData,\n    };\n    return fetch(api, config).then(response => response.json());\n}\n\nexport const pure = axios;\n\nexport default {\n    common: ajax,\n    ajaxFile,\n};\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemSearch.jsx",["156"],"import React, { Component } from 'react';\n\nimport BaseForm from '../component/BaseForm';\nimport {\n    Form,\n    Select,\n    Button,\n    Input,\n    InputNumber,\n} from 'antd';\nimport './index.css';\nconst { Option } = Select;\n\nexport default class app extends Component {\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        const {\n            handleChangeItem,\n            formData,\n            handleSubmit,\n            check,\n            disabled,\n            type,\n            require,\n            pointsList,\n            subjectsList,\n        } = this.props;\n        return (\n            <div>\n                <Form\n                    name=\"basic\"\n                    layout=\"inline\"\n                    initialValues={formData}\n                    required={require}\n                    className=\"search-item\"\n                >\n                    <Form.Item\n                        label=\"题目类型\"\n                        name=\"problemType\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.problemType} \n                            required={require}\n                            requireStyle\n                        >\n                            <Select\n                                style={{ width: 180 }}\n                                value={formData.problemType || undefined}\n                                defaultValue=\"all\"\n                                onChange={(e) => { handleChangeItem('problemType', e)}}\n                                disabled={disabled}\n                            >\n                                {!type ? <Option value=\"all\">全部</Option> : ''}\n                                <Option value=\"choice\">单选题</Option>\n                                <Option value=\"judgement\">判断题</Option>\n                                <Option value=\"multiple\">多选题</Option>\n                                <Option value=\"blank\">填空题</Option>\n                                <Option value=\"shortAnswer\">简答题</Option>\n                            </Select>\n                        </BaseForm>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"课程\"\n                        name=\"subject\"\n                        required={require}\n                    >\n                        <BaseForm \n                            warning={check.subject}\n                            required={require}\n                            requireStyle\n                        >\n                            <Select \n                                style={{ width: 180 }}\n                                placeholder=\"请选择课程\"\n                                value={formData.subject || undefined}\n                                onChange={(e) => { handleChangeItem('subject', e)}}\n                                disabled={disabled}\n                            >\n                                {!type ? <Option value=\"\">全部</Option> : ''} \n                                {\n                                    subjectsList.map((item) => {\n                                        return (\n                                            <Option value={item.subjectId}>{item.subjectName}</Option>\n                                        )\n                                    })\n                                }\n                            </Select>\n                        </BaseForm>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        label=\"包含知识点\"\n                        name=\"knowledgePoints\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.knowledgePoints}\n                            required={require}\n                            requireStyle\n                        >\n                            <Select\n                                style={{ width: 240 }}\n                                mode=\"multiple\"\n                                optionLabelProp=\"label\"\n                                placeholder=\"请选择包含知识点\"\n                                value={formData.knowledgePoints || undefined}\n                                onChange={(e) => { handleChangeItem('knowledgePoints', e)}}\n                                disabled={(!formData.subject? true : false) && (!type ? false : true)}\n                            >\n                                {\n                                    pointsList.map((item) => {\n                                        return (\n                                            <Option value={item.pointId} label={item.pointName}>\n                                                <div className=\"demo-option-label-item\">\n                                                    <span role=\"img\" aria-label={item.pointName}>\n                                                        {item.pointName}\n                                                    </span>\n                                                    <span style={{ float: 'right'}}>\n                                                        ({item.chapter})\n                                                    </span>\n                                                </div>\n                                            </Option>\n                                        )\n                                    })\n                                }\n                            </Select>\n                        </BaseForm>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"难度等级\"\n                        name=\"difficultyLevel\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.difficultyLevel}\n                            required={require}\n                            requireStyle\n                        >\n                            <InputNumber\n                                min={0.1}\n                                max={1}\n                                style={{ width: 180 }}\n                                placeholder=\"请输入难度等级（0~1）\"\n                                value={formData.difficultyLevel || undefined}\n                                onChange={(e) => { handleChangeItem('difficultyLevel', e)}}\n                                disabled={disabled}\n                            />\n                        </BaseForm>\n                    </Form.Item>\n                    \n                    {/* <Form.Item\n                        label=\"题目分数\"\n                        name=\"score\"\n                        required={require}\n                    >\n                        <BaseForm\n                            warning={check.score}\n                            required={require}\n                            requireStyle\n                        >\n                            <Select\n                                style={{ width: 180 }}\n                                placeholder=\"请选择题目分数\"\n                                value={formData.score || undefined}\n                                onChange={(e) => { handleChangeItem('score', e)}}\n                                disabled={disabled}\n                            >\n                                <Option value=\"1\">1</Option>\n                                <Option value=\"2\">2</Option>\n                                <Option value=\"3\">3</Option>\n                                <Option value=\"4\">4</Option>\n                                <Option value=\"5\">5</Option>\n                                <Option value=\"6\">6</Option>\n                                <Option value=\"7\">7</Option>\n                                <Option value=\"8\">8</Option>\n                                <Option value=\"9\">9</Option>\n                                <Option value=\"10\">10</Option>\n                                <Option value=\"20\">20</Option>\n                            </Select>\n                        </BaseForm>\n                    </Form.Item> */}\n                    {\n                        !type \n                        ? \n                        <Form.Item\n                            label=\"题目信息\"\n                            name=\"problemText\"\n                            required={require}\n                        >\n                            <BaseForm\n                                warning={check.problemText}\n                                required={require}\n                                requireStyle\n                            >\n                                <Input\n                                    style={{ width: 300 }}\n                                    placeholder=\"请输入题目信息\"\n                                    value={formData.problemText || undefined}\n                                    onChange={(e) => { handleChangeItem('problemText', e.target.value)}}\n                                    disabled={disabled}\n                                />\n                            </BaseForm>\n                        </Form.Item>\n                        : ''\n                    }\n                    <Form.Item className=\"problems_layout\">\n                        {\n                            !type ? \n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                onClick={() => { handleSubmit() }}\n                            >\n                                查询\n                            </Button> : ''\n                        }\n                    </Form.Item>\n                </Form>\n            </div>\n        )\n    }\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\wrapComponent.jsx",["157","158"],"import React, { Component } from 'react'\nimport { Layout } from 'antd';\nimport Nav from '../../nav';\nimport Head from '../../header';\nconst { Header, Sider } = Layout;\n\nexport default (WrappedComponent) => {\n    return class extends Component {\n        constructor(props){\n            super(props);\n        }\n        render() {\n            return (\n                <Layout>\n                    <Header style={{ paddingLeft: 5, paddingRight: 10, height: 70 }}>\n                        <Head />\n                    </Header>\n                    <Layout>\n                        <Sider width={200} style={{ backgroundColor: '#fff'}}>\n                            <Nav />\n                        </Sider>\n                        <Layout>\n                            <WrappedComponent {...this.props}/>\n                        </Layout>\n                    </Layout>\n                </Layout>\n            );\n        }\n    };\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\BaseForm.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\RenderProblem.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\nav\\index.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\header\\index.jsx",["159","160","161"],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\login.js",["162"],"import actionType from '../actionType.js';\nimport APIS from '../../constants/api.js';\nimport $ajax from '../../utils/ajax';\nimport { message } from 'antd';\n\nconst actions = {\n    onLogin: params => dispatch => {\n        const options = {\n            method: 'post',\n            api: APIS.login,\n            params: params.formData,\n            contentType: 'json',\n        };\n        $ajax.common(options).then((res) => {\n            if (res.code === 10000) {\n                message.success(res.message);\n                dispatch({\n                    type: actionType.LOGIN,\n                    username: res.data.userName,\n                    type: res.data.type,\n                });\n                window.localStorage.setItem('userId', res.data.id);\n                window.localStorage.setItem('username', res.data.userName);\n                window.localStorage.setItem('type', res.data.type); \n                params.props.history.push('/home');\n            } else {\n                message.error({\n                    content: res.message,\n                    className: 'custom-class',\n                    style: {marginTop: '30vh'},\n                });\n            }\n            return res;\n        }).catch((e) => {\n            console.log(e);\n        })\n    },\n}\nexport default actions;","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\points.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\subjects.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\user.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\problems.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\papers.js",[],{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":1,"column":1,"nodeType":"169","endLine":28,"endColumn":2},{"ruleId":"170","severity":1,"message":"171","line":147,"column":25,"nodeType":"172","endLine":150,"endColumn":27},{"ruleId":"170","severity":1,"message":"171","line":156,"column":25,"nodeType":"172","endLine":159,"endColumn":27},{"ruleId":"173","severity":1,"message":"174","line":13,"column":5,"nodeType":"175","messageId":"176","endLine":13,"endColumn":11},{"ruleId":"173","severity":1,"message":"177","line":4,"column":5,"nodeType":"175","messageId":"176","endLine":4,"endColumn":10},{"ruleId":"173","severity":1,"message":"178","line":9,"column":5,"nodeType":"175","messageId":"176","endLine":9,"endColumn":8},{"ruleId":"179","severity":1,"message":"180","line":118,"column":25,"nodeType":"172","endLine":118,"endColumn":87},{"ruleId":"179","severity":1,"message":"180","line":120,"column":25,"nodeType":"172","endLine":120,"endColumn":91},{"ruleId":"173","severity":1,"message":"181","line":565,"column":44,"nodeType":"175","messageId":"176","endLine":565,"endColumn":55},{"ruleId":"182","severity":1,"message":"183","line":595,"column":17,"nodeType":"184","messageId":"185","endLine":595,"endColumn":23},{"ruleId":"173","severity":1,"message":"186","line":20,"column":8,"nodeType":"175","messageId":"176","endLine":20,"endColumn":14},{"ruleId":"167","severity":1,"message":"168","line":76,"column":1,"nodeType":"169","endLine":79,"endColumn":3},{"ruleId":"187","severity":1,"message":"188","line":15,"column":5,"nodeType":"189","messageId":"190","endLine":17,"endColumn":6},{"ruleId":"167","severity":1,"message":"191","line":7,"column":1,"nodeType":"169","endLine":30,"endColumn":2},{"ruleId":"187","severity":1,"message":"188","line":9,"column":9,"nodeType":"189","messageId":"190","endLine":11,"endColumn":10},{"ruleId":"173","severity":1,"message":"192","line":3,"column":27,"nodeType":"175","messageId":"176","endLine":3,"endColumn":41},{"ruleId":"173","severity":1,"message":"193","line":3,"column":43,"nodeType":"175","messageId":"176","endLine":3,"endColumn":56},{"ruleId":"170","severity":1,"message":"171","line":30,"column":25,"nodeType":"172","endLine":34,"endColumn":27},{"ruleId":"194","severity":1,"message":"195","line":20,"column":21,"nodeType":"196","messageId":"197","endLine":20,"endColumn":25},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","'Tag' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'problemType' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'papers' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Assign arrow function to a variable before exporting as module default","'LogoutOutlined' is defined but never used.","'LoginOutlined' is defined but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation"]