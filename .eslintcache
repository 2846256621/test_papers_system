[{"F:\\Projects\\React学习\\test_paper_system\\src\\index.js":"1","F:\\Projects\\React学习\\test_paper_system\\src\\store\\reducers.js":"2","F:\\Projects\\React学习\\test_paper_system\\src\\App.jsx":"3","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actionType.js":"4","F:\\Projects\\React学习\\test_paper_system\\src\\routers\\route.jsx":"5","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\login\\index.jsx":"6","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\sign\\index.jsx":"7","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\home.jsx":"8","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemList.jsx":"9","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\subjects\\subjects.jsx":"10","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperList.jsx":"11","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperDetails.jsx":"12","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\points\\points.jsx":"13","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userPerson.jsx":"14","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions.js":"15","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userManage.jsx":"16","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemManage.jsx":"17","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperAutomatic.jsx":"18","F:\\Projects\\React学习\\test_paper_system\\src\\constants\\api.js":"19","F:\\Projects\\React学习\\test_paper_system\\src\\utils\\ajax.js":"20","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemSearch.jsx":"21","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\wrapComponent.jsx":"22","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\BaseForm.jsx":"23","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\RenderProblem.jsx":"24","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\nav\\index.jsx":"25","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\header\\index.jsx":"26","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\login.js":"27","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\points.js":"28","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\subjects.js":"29","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\user.js":"30","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\problems.js":"31"},{"size":590,"mtime":1610542394000,"results":"32","hashOfConfig":"33"},{"size":4806,"mtime":1617534773388,"results":"34","hashOfConfig":"33"},{"size":274,"mtime":1609841185000,"results":"35","hashOfConfig":"33"},{"size":622,"mtime":1617534647560,"results":"36","hashOfConfig":"33"},{"size":2191,"mtime":1610355099000,"results":"37","hashOfConfig":"33"},{"size":5631,"mtime":1615994152282,"results":"38","hashOfConfig":"33"},{"size":5767,"mtime":1610520394000,"results":"39","hashOfConfig":"33"},{"size":3869,"mtime":1616039547642,"results":"40","hashOfConfig":"33"},{"size":9892,"mtime":1617535817167,"results":"41","hashOfConfig":"33"},{"size":12691,"mtime":1617462648393,"results":"42","hashOfConfig":"33"},{"size":11666,"mtime":1616039567831,"results":"43","hashOfConfig":"33"},{"size":11414,"mtime":1616851240233,"results":"44","hashOfConfig":"33"},{"size":17369,"mtime":1616510606592,"results":"45","hashOfConfig":"33"},{"size":8575,"mtime":1616508454586,"results":"46","hashOfConfig":"33"},{"size":2961,"mtime":1610464965716,"results":"47","hashOfConfig":"33"},{"size":12843,"mtime":1616582856479,"results":"48","hashOfConfig":"33"},{"size":29899,"mtime":1617535367340,"results":"49","hashOfConfig":"33"},{"size":18058,"mtime":1616851241101,"results":"50","hashOfConfig":"33"},{"size":1355,"mtime":1617534719368,"results":"51","hashOfConfig":"33"},{"size":1934,"mtime":1610187595000,"results":"52","hashOfConfig":"33"},{"size":9812,"mtime":1617535843960,"results":"53","hashOfConfig":"33"},{"size":922,"mtime":1610436446000,"results":"54","hashOfConfig":"33"},{"size":435,"mtime":1609860035000,"results":"55","hashOfConfig":"33"},{"size":3556,"mtime":1616851242571,"results":"56","hashOfConfig":"33"},{"size":2408,"mtime":1617013865787,"results":"57","hashOfConfig":"33"},{"size":1718,"mtime":1616681964380,"results":"58","hashOfConfig":"33"},{"size":1297,"mtime":1615981391851,"results":"59","hashOfConfig":"33"},{"size":3641,"mtime":1616041697829,"results":"60","hashOfConfig":"33"},{"size":3645,"mtime":1616041686639,"results":"61","hashOfConfig":"33"},{"size":3467,"mtime":1616509046287,"results":"62","hashOfConfig":"33"},{"size":4332,"mtime":1617534684070,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"bqrvr0",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Projects\\React学习\\test_paper_system\\src\\index.js",[],["139","140"],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\reducers.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\App.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actionType.js",["141"],"F:\\Projects\\React学习\\test_paper_system\\src\\routers\\route.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\login\\index.jsx",["142"],"import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport login from '../../store/actions/login';\nimport {\n    Card,\n    Form,\n    Input,\n    Button,\n    Radio,\n    Row,\n    Col,\n    Divider,\n    message,\n } from 'antd';\nimport './index.css';\nimport APIS from '../../constants/api';\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 6, span: 10 },\n};\n\nconst rules = {\n    userName: [{\n        required: true,\n        message: '请输入用户名',\n    }],\n    passWord: [{\n        required: true,\n        message: '请输入密码',\n    }],\n    loginType: [{\n        required: true,\n        message: '请选择登录方式',\n    }],\n    verificationCode: [{\n        required: true,\n        message: '请输入验证码',\n    }]\n}\n\nclass app extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            verificationCode: '',\n            date: new Date(),\n        };\n    }\n\n    formRef = React.createRef();\n\n    handleChangeItem = (filde, value) => {\n        this.setState({\n            verificationCode: value,\n        });\n    }\n    onFinish = (values) => {\n        const { verificationCode } = this.state;\n        this.setState({\n            formData: {...values, verificationCode},\n        }, this.handleLogin);\n    }\n\n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n        message.error({\n            content: '请输入完整信息',\n            className: 'custom-class',\n            style: {marginTop: '30vh'},\n        });\n    };\n\n    onReset = () => {\n        this.formRef.current.resetFields();\n    };\n\n    handleLogin = () => {\n        const { onLogin } = this.props;\n        const { formData } = this.state;\n        onLogin({ formData, props: this.props });\n    }\n    render() {\n        const { formData, date, verificationCode } = this.state;\n        return (\n            <Card\n                title=\"欢迎登录自动组卷系统\"\n                extra={<Link to='/signIn'>去注册</Link>}\n                id=\"login-container\"\n            >\n                 <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={formData}\n                    ref={this.formRef}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"用户名\"\n                        name=\"userName\"\n                        rules={rules.userName}\n                    >\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入用户名\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"密码\"\n                        name=\"passWord\"\n                        rules={rules.passWord}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入密码\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"账号类型\"\n                        name=\"type\"\n                        rules={rules.loginType}\n                    >\n                        <Radio.Group\n                            label=\"Radio.Group\"\n                            name=\"radio-group\"\n                        >\n                            <Radio value={0}>用户</Radio>\n                            <Radio value={1}>管理员</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    \n                    <Form.Item\n                        label=\"验证码\"\n                        name=\"verificationCode\"\n                    >\n                        <Input\n                            style={{width: 85}}\n                            placeholder=\"验证码\"\n                            value={verificationCode || undefined}\n                            onChange={(e) => this.handleChangeItem('verificationCode', e.target.value)}\n                        />\n                        <img\n                            style={{width: 100, marginLeft: 10, height: 32 }}\n                            src={`${APIS.verificationCode}?${date}`}\n                        />\n                    </Form.Item>\n                    \n                    <Divider dashed />\n\n                    <Form.Item {...tailLayout}>\n                        <Row>\n                            <Col span={4}>\n                                <Button\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                >\n                                    登录\n                                </Button>\n                            </Col>\n                            <Col span={4} offset={16}>\n                                <Button htmlType=\"button\" onClick={this.onReset}>\n                                    重置\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Item>\n                </Form>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    username: state.login.username,\n});\n \nconst mapDispatchToProps = dispatch => ({\n    onLogin: (params) => dispatch(login.onLogin(params)),\n});\n \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app);","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\sign\\index.jsx",["143"],"import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport {\n    Card,\n    Form,\n    Input,\n    Button,\n    Row,\n    Col,\n    Divider,\n    message,\n } from 'antd';\nimport $ajax from '../../utils/ajax';\nimport APIS from '../../constants/api';\nimport './index.css';\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 6, span: 10 },\n};\n\nconst rules = {\n    username: [{\n        required: true,\n        message: '请输入用户名',\n    }],\n    password: [{\n        required: true,\n        message: '请输入密码',\n    }],\n    againPassword: [{\n        required: true,\n        message: '请再次输入密码',\n    }]\n}\n\nexport default class app extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            message: '',\n            date: new Date(),\n        };\n    }\n\n    formRef = React.createRef();\n\n    handleChangeItem = (filde, value) => {\n        this.setState({\n            verificationCode: value,\n        });\n    }\n    onFinish = (values) => {\n        const { verificationCode } = this.state;\n        this.setState({\n            formData: {...values, type: 0, verificationCode},\n        }, this.onRegister);\n    };\n    \n    onRegister = () => {\n        const { formData } = this.state;\n        if( formData.againPassword !== formData.passWord) {\n            message.error({\n                content: '密码输入不一致！请重新输入',\n                className: 'custom-class',\n                style: {marginTop: '30vh'},\n            });\n        } else {\n            $ajax.common({\n                method: 'post',\n                api: APIS.userRegister,\n                params: formData,\n                contentType: 'json',\n            }).then(res => {\n                if (res.code === 10018 && res.success === true) { \n                    message.success(res.message);\n                    this.setState({\n                        message: <p style={{ marginLeft: 30, color: 'green'}}> { res.message }</p>,\n                    });\n                } else {\n                    this.setState({\n                        message: <p style={{ marginLeft: 30, color: 'red'}}> { res.message }</p>,\n                    });\n                }\n            }).catch(err => {\n                console.log(err);\n            });\n        }\n        \n    }\n\n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    onReset = () => {\n        this.formRef.current.resetFields();\n    };\n\n    render() {\n        const { formData, message, verificationCode, date } = this.state;\n        return (\n            <Card\n                title=\"欢迎注册\"\n                extra={<Link to='/login'>去登录</Link>}\n                id=\"signIn-container\"\n            >\n                 <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={formData}\n                    ref={this.formRef}\n                    onFinish={this.onFinish}\n                    onFinishFailed={this.onFinishFailed}\n                >\n                    <Form.Item\n                        label=\"用户名\"\n                        name=\"userName\"\n                        rules={rules.username}\n                    >\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入用户名\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"密码\"\n                        name=\"passWord\"\n                        rules={rules.password}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请输入密码\" />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"确认密码\"\n                        name=\"againPassword\"\n                        rules={rules.againPassword}\n                    >\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"请再次输入密码\" />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"验证码\"\n                        name=\"verificationCode\"\n                    >\n                        <Input\n                            style={{width: 85}}\n                            placeholder=\"验证码\"\n                            value={verificationCode || undefined}\n                            onChange={(e) => this.handleChangeItem('verificationCode', e.target.value)}\n                        />\n                        <img\n                            style={{width: 100, marginLeft: 10, height: 32 }}\n                            src={`${APIS.verificationCode}?${date}`}\n                        />\n                    </Form.Item>\n                    { message }\n                    <Divider dashed />\n\n                    <Form.Item {...tailLayout}>\n                        <Row>\n                            <Col span={4}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    注册\n                                </Button>\n                            </Col>\n                            <Col span={4} offset={16}>\n                                <Button htmlType=\"button\" onClick={this.onReset}>\n                                    重置\n                                </Button>\n                            </Col>\n                        </Row>                      \n                    </Form.Item>\n                </Form>\n            </Card>\n        )\n    }\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\home.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemList.jsx",["144","145"],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\subjects\\subjects.jsx",["146","147"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Table,\n    Space,\n    Breadcrumb,\n    Layout,\n    Button,\n    Card,\n    Modal,\n    Form,\n    Input,\n    Pagination,\n    message,\n} from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport WrappedComponent from '../component/wrapComponent';\nimport subjects from '../../../../store/actions/subjects';\nimport '../index.css';\nconst { Content } = Layout;\nconst { confirm } = Modal;\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            currentPage: 1,\n            pageSize: 10,\n            userId: window.localStorage.getItem('userId'),\n            type: window.localStorage.getItem('type'),\n        }\n    }\n    componentDidMount(){\n        const { getSubjects } = this.props;\n        const { currentPage, pageSize} = this.state;\n        getSubjects({currentPage, pageSize, userId: window.localStorage.getItem('userId')});\n    }\n\n    getColumns = () => {\n        return [\n            {\n                title: '课程ID',\n                dataIndex: 'subjectId',\n                key: 'subjectId',\n            },\n            {\n                title: '课程名称',\n                dataIndex: 'subjectName',\n                key: 'subjectName',\n            },\n            {\n                title: '包含知识点数',\n                dataIndex: 'pointCount',\n                key: 'pointCount',\n            },\n            {\n                title: '选择题数',\n                dataIndex: 'choiceCount',\n                key: 'choiceCount',\n            },\n            {\n                title: '判断题数',\n                dataIndex: 'judgementCount',\n                key: 'judgementCount',\n            },\n            {\n                title: '填空题数',\n                dataIndex: 'blankCount',\n                key: 'blankCount',\n            },\n            {\n                title: '简答题数',\n                dataIndex: 'shortAnswerCount',\n                key: 'shortAnswerCount',\n            },\n            {\n                title: '操作',\n                key: '',\n                render: (text, record) => {\n                    const { userId, type } = this.state;\n                    return (  \n                        <Space size=\"middle\">\n                            {\n                                (+userId === record.userId || type === '1') ? \n                                <>\n                                    <a onClick={() =>{this.subjectManageModal('modify', record)}}>修改</a>\n                                    <a onClick={() => {this.onDelSubject(record.subjectId)}}>删除</a>\n                                </>\n                                : '无'\n                            }\n                        </Space>\n                    )\n                }\n            },\n        ];   \n    }\n\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { formData } = this.state;\n        const tempFormData = Object.assign({}, formData, { [filedName]: value });\n        this.setState({\n            formData: tempFormData,\n        });\n    }\n\n    // 确认添加或修改\n    onOkModify = (type, record) => {\n        const { formData, currentPage, pageSize } = this.state;\n        if(type === 'add') {\n            if(!Object.keys(formData).length || formData.subjectName === '') {\n                message.error({\n                    content: '未添加，不得保存',\n                    className: 'custom-class',\n                    style: {marginTop: '30vh'},\n                });\n            } else {\n                const { addSubject, getSubjects } = this.props;\n                addSubject({\n                    name: formData.subjectName,\n                    userId: window.localStorage.getItem('userId'),\n                });\n                setTimeout(()=>{\n                    const { subjectAddSuccess } = this.props;\n                    if (subjectAddSuccess) {\n                        const { formData } = this.state;\n                        const tempFormData = formData;\n                        tempFormData.subjectName = '';\n                        this.setState({\n                            formData: tempFormData,\n                        }, () => {\n                            console.log('添加成功');\n                            getSubjects({currentPage, pageSize, userId: window.localStorage.getItem('userId')});\n                        });\n                    }\n                }, 500);\n                \n            }\n        }\n        if( type === 'modify'){\n            if(!Object.keys(formData).length || formData.subjectName === '') {\n                message.error({\n                    content: '未修改，不得保存',\n                    className: 'custom-class',\n                    style: {marginTop: '30vh'},\n                });\n            } else {\n                const { updateSubject, getSubjects } = this.props;\n                const tempData = {\n                    name: formData.subjectName,\n                    id: record.subjectId,\n                };\n                updateSubject(tempData);\n                setTimeout(()=>{\n                    const { subjectUpdateSuccess } = this.props;\n                    if (subjectUpdateSuccess) {\n                        const { formData } = this.state;\n                        const tempFormData = formData;\n                        tempFormData.subjectName = '';\n                        this.setState({\n                            formData: tempFormData,\n                        }, getSubjects({currentPage, pageSize, userId: window.localStorage.getItem('userId')}));\n                    }\n                },500);\n               \n            }\n        }\n    }\n\n    // 添加或修改弹窗\n    subjectManageModal = (type, record) => {\n        const { formData } = this.state;\n        return (\n            confirm({\n                title: type === 'modify' ? '修改课程' : '增加课程',\n                icon: <ExclamationCircleOutlined />,\n                content: (\n                    <Form\n                        name=\"basic\"\n                        layout=\"Horizontal\"\n                        initialValues={record}\n                    >\n                        <Form.Item\n                            label=\"课程名称\"\n                            name=\"subjectName\"\n                        >\n                            <Input\n                                placeholder=\"请输入课程名称\"\n                                value={formData.subjectName}\n                                onChange={ (e) => { this.handleChangeModalItem('subjectName', e.target.value)}}\n                            />\n                        </Form.Item>\n                    </Form>\n                ),\n                style: { marginTop: 150 },\n                okText: '保存',\n                cancelText: '取消',\n                onOk: () => {\n                    this.onOkModify(type, record);\n                },\n                onCancel: () => {\n                    console.log('不保存')\n                },\n            })      \n        )\n    }\n\n\n    // 删除课程\n    onDelSubject = (id) => {\n        console.log('删除课程', this.props);\n        confirm({\n            title: '系统提示',\n            icon: <ExclamationCircleOutlined />,\n            content: `删除课程将会同步删除其关联的知识点及题目，确定要删除吗？`,\n            style: { marginTop: 150 },\n            okText: '确认',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => {\n                const { dropSubject, getSubjects } = this.props;\n                const { currentPage, pageSize } = this.state;\n                dropSubject({id});\n                getSubjects({ currentPage, pageSize, userId: window.localStorage.getItem('userId')});\n            },\n            onCancel: () => {\n                console.log('Cancel');\n            },\n        });\n    }\n\n    // 查询课程\n    handleSelectSubject = (subjectName) => {\n        const { getSubjects } = this.props;\n        const { currentPage, pageSize, formData } = this.state;\n        getSubjects({ name:subjectName, currentPage, pageSize, userId: window.localStorage.getItem('userId')});\n        const tempFormData = formData;\n        tempFormData.subjectName = '';\n        this.setState({\n            formData: tempFormData,\n        });\n    }\n\n    // 分页\n    onChangePage = (page, pageSize) => {\n        this.setState({\n            currentPage: page,\n            pageSize,\n        }, () => {\n            const { getSubjects } = this.props;\n            const { currentPage, pageSize } = this.state;\n            getSubjects({currentPage, pageSize, userId: window.localStorage.getItem('userId')});\n        });\n    }\n\n    render() {\n        const { formData, currentPage, pageSize } = this.state;\n        const { subjectsList, totalSubjectCount } = this.props;\n        return (\n            <div style={{ padding: 10 }} className=\"subject-list\">\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试题管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>课程管理</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Form\n                            name=\"basic\"\n                            layout=\"inline\"\n                        >\n                            <Form.Item\n                                label=\"课程名称\"\n                                name=\"subjectName\"\n                            >\n                                <Input\n                                    placeholder=\"请输入课程名称\"\n                                    value={formData.subjectName}\n                                    onChange={ (e) => { this.handleChangeModalItem('subjectName', e.target.value)}}\n                                />\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={ () => { this.handleSelectSubject(formData.subjectName) }}\n                                >\n                                    查询\n                                </Button>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={ () => { this.subjectManageModal('add', formData) }}\n                                >\n                                    添加课程\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                        <Table\n                            bordered\n                            style={{ marginTop: 20 }}\n                            columns={this.getColumns()}\n                            dataSource={subjectsList}\n                            pagination={false}\n                        />\n                        <Pagination\n                            style={{ float: 'right', marginTop: 20}}\n                            showQuickJumper\n                            showSizeChanger={true}\n                            current={currentPage}\n                            total={totalSubjectCount}\n                            pageSize={pageSize}\n                            onChange={this.onChangePage}\n                        />\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    subjectsList: state.subjects.subjectsList,\n    totalSubjectCount: state.subjects.totalSubjectCount,\n    subjectAddSuccess: state.subjects.subjectAddSuccess,\n    subjectUpdateSuccess: state.subjects.subjectUpdateSuccess,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getSubjects: params => dispatch(subjects.getSubjects(params)),\n    addSubject: params => dispatch(subjects.addSubject(params)),\n    updateSubject: params => dispatch(subjects.updateSubject(params)),\n    dropSubject: params => dispatch(subjects.dropSubject(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperList.jsx",["148","149"],"import React, { Component } from 'react';\nimport {\n    Table,\n    Tag,\n    Space,\n    Breadcrumb,\n    Layout,\n    Card,\n    Modal,\n    Input,\n    Form,\n    Select,\n    Button,\n    DatePicker,\n} from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport WrappedComponent from '../component/wrapComponent';\nimport { Link } from \"react-router-dom\";\nimport moment from 'moment';\nimport locale from 'antd/lib/date-picker/locale/zh_CN';\nimport 'moment/locale/zh-cn';\nconst { Content } = Layout;\nconst { confirm } = Modal;\nconst { Option } = Select;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 14 },\n};\nconst data = [{\n    id: 1,\n    testPaperName: '测试试卷',\n    subject: '语文',\n    startTime:'2020-01-13 20:00:00',\n    endTime: '2020-01-13 21:00:00',\n    score: '60',\n    difficulty: '0.8',\n    knowledgePoints: ['nice', 'wow'],\n}, {\n    id: 2,\n    testPaperName: '测试试卷',\n    subject: '语文',\n    startTime:'2020-01-13 20:00:00',\n    endTime: '2020-01-13 21:00:00',\n    score: '60',\n    difficulty: '0.8',\n    knowledgePoints: ['nice', 'wowowwowwowwowwowwowwowwowwowwowwowwoww','nicewowwowwowwow', 'wow','nice', 'wow','nwowwowwowice', 'wow','nice', 'wow','nice', 'wow','nice', 'wow','nice', 'wow','nice', 'wow','nice', 'wowowwowwoww','nice', 'wowwowwowwowwow','nice', 'wow','nice', 'wow'],\n}];\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {\n                testPaperName: '',\n                subject: '',\n            },\n            check: {},\n            modalFormDate: {},\n            userId: window.localStorage.getItem('userId'),\n            type: window.localStorage.getItem('type'),\n        }\n    }\n\n    getColumns = () => {\n        return [\n            {\n                title: '试卷ID',\n                dataIndex: 'id',\n                key: 'id',\n                width:100,\n            },\n            {\n                title: '试卷名称',\n                dataIndex: 'testPaperName',\n                key: 'testPaperName',\n                width:250,\n            },\n            {\n                title: '所属课程',\n                dataIndex: 'subject',\n                key: 'subject',\n                width:150,\n            },\n            {\n                title: '开始时间',\n                dataIndex: 'startTime',\n                key: 'startTime',\n                width:200,\n            },\n            {\n                title: '结束时间',\n                key: 'startTime',\n                dataIndex: 'startTime',\n                width:200,\n            },\n            {\n                title: '总分',\n                key: 'score',\n                dataIndex: 'score',\n                width:100,\n            },\n            {\n                title: '难度',\n                key: 'difficulty',\n                dataIndex: 'difficulty',\n                width:100,\n            },\n            {\n                title: '包含知识点',\n                dataIndex: 'knowledgePoints',\n                key: 'knowledgePoints',\n                width:370,\n                render: tags => (\n                    <>\n                        {tags.map((tag, index) => {\n                            return (\n                                <Tag color='volcano' key={`${tag}_${index}`}>\n                                    {tag}\n                                </Tag>\n                            );\n                        })}\n                    </>\n                ),\n            },\n            {\n                title: '操作',\n                key: '',\n                fixed: 'right',\n                width:200,\n                render: (text, record) => {\n                    const { userId, type } = this.state;\n                    return (\n                        <Space size=\"middle\">\n                            <Link to='/testPaperDetails' replace>查看试卷</Link>\n                            {\n                                (userId === record.userId  || type === '1') ? \n                                 (\n                                    <>\n                                        <a onClick={() => {this.onModifyTestPaper(record)}}>修改</a>\n                                        <a onClick={() => {this.onDelTestPaper(record.id)}}>删除</a>\n                                    </>\n                                ) : ''\n                            }\n                            \n                        </Space>\n                    )\n                } \n              },\n          ];\n          \n    }\n\n    formRef = React.createRef();\n\n    // 处理表单字段\n    handleChangeItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { formData } = this.state;\n        const tempFormDate = Object.assign({}, formData, { [filedName]: value });\n        this.setState({\n            formData: tempFormDate,\n        });\n    }\n\n    // 提交查询\n    onSubmit = () => {\n        console.log('submit提交表单',this.state.formData);\n    }\n\n    // 删除试卷\n    onDelTestPaper = (id) => {\n        confirm({\n            title: '系统提示',\n            icon: <ExclamationCircleOutlined />,\n            content: `确定要删除试卷${id}吗？`,\n            style: { marginTop: 150 },\n            okText: '确认',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk() {\n              console.log('OK');\n            },\n            onCancel() {\n              console.log('Cancel');\n            },\n        });\n    }\n\n    // 修改试卷\n    onModifyTestPaper = (record) => {\n        let tempRecord = record;\n        tempRecord.startTime = moment(record.startTime,'YYYY-MM-DD HH:mm:ss');\n        tempRecord.endTime = moment(record.endTime,'YYYY-MM-DD HH:mm:ss');\n        confirm({\n            title: '修改试卷信息',\n            icon: <ExclamationCircleOutlined />,\n            content: (\n                <Form\n                    {...layout}\n                    name=\"basic\"\n                    layout=\"Horizontal\"\n                    initialValues={tempRecord}\n                >\n                    <Form.Item\n                        label=\"试卷名称\"\n                        name=\"testPaperName\"\n                    >\n                        <Input\n                            placeholder=\"请输入试卷名称\"\n                            value={tempRecord.testPaperName}\n                            onChange={ (e) => { this.handleChangeModalItem('testPaperName', e)}}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"开始时间\"\n                        name=\"startTime\"\n                    >\n                        <DatePicker\n                            showTime\n                            format=\"YYYY-MM-DD HH:mm:ss\"\n                            value={tempRecord.startTime}\n                            locale={locale}\n                            onChange={ (time, timeString) => { this.handleChangeModalItem('startTime', timeString)}}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"结束时间\"\n                        name=\"endTime\"\n                    >\n                        <DatePicker\n                            showTime\n                            format=\"YYYY-MM-DD HH:mm:ss\"\n                            value={tempRecord.endTime}\n                            locale={locale}\n                            onChange={ (time, timeString) => { this.handleChangeModalItem('endTime', timeString)}}\n                        />\n                    </Form.Item>\n                </Form>\n            ),\n            style: { marginTop: 150 },\n            okText: '保存',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => {\n                this.onOkModify(record);\n            },\n            onCancel: () => {\n                console.log('不保存')\n            },\n        })\n    }\n\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { modalFormDate } = this.state;\n        const tempModalFormDate = Object.assign({}, modalFormDate, { [filedName]: value });\n        this.setState({\n            modalFormDate: tempModalFormDate,\n        });\n    }\n\n     // 确认修改\n     onOkModify = (record) => {\n        const { modalFormDate } = this.state;\n        // 请求返回之后，modalFormDate清空\n        console.log(modalFormDate);\n    }\n\n    render() {\n        const { formData } = this.state;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试题管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试卷管理</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Form\n                            layout=\"inline\"\n                            initialValues={formData}\n                        >\n                            <Form.Item\n                                label=\"试卷名称\"\n                                name=\"testPaperName\"\n                            >\n                                <Input\n                                    placeholder=\"请输入试卷名称\"\n                                    style={{ width: 180 }}\n                                    value={formData.testPaperName}\n                                    onChange={(e) => this.handleChangeItem('testPaperName', e.target.value)}\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                label=\"所属课程\"\n                                name=\"subject\"\n                            >\n                                <Select \n                                    style={{ width: 180 }}\n                                    placeholder=\"请选择课程\"\n                                    value={formData.subject}\n                                    onChange={(e) => this.handleChangeItem('subject', e)}\n                                >\n                                    <Option value=\"\">全部</Option>\n                                    <Option value=\"1\">数学</Option>\n                                    <Option value=\"2\">语文</Option>\n                                    <Option value=\"3\">英语</Option>\n                                </Select>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={this.onSubmit}\n                                >\n                                    查询\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                        <Table\n                            bordered\n                            style={{ marginTop: 20 }}\n                            columns={this.getColumns()}\n                            dataSource={data}\n                            scroll={{ x: 1800 }}\n                        />\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport default WrappedComponent(app);","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperDetails.jsx",["150"],"import React, { Component } from 'react'\nimport {\n    Breadcrumb,\n    Layout,\n    Card,\n    Table,\n    Form,\n    Space,\n    Button,\n    Alert,\n    Modal,\n    Select,\n    DatePicker,\n    Input,\n} from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport locale from 'antd/lib/date-picker/locale/zh_CN';\nimport 'moment/locale/zh-cn';\nimport RenderProblem from '../component/RenderProblem';\nimport WrappedComponent from '../component/wrapComponent';\nconst { Content } = Layout;\nconst { confirm } = Modal;\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 14 },\n};\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: [{\n                fitness: 0.43,\n                difficulty: 0.8,\n                pointCoverage: 0.3,\n                problemNum: 20,\n                score: 100,\n            }],\n            problemList: [{\n                id: '1',\n                problemType: 'choice',\n                problemText: '计算机网络是一门很有意思的课程。',\n                choiceOptionA: '是的',\n                choiceOptionB: '不是',\n                choiceOptionC: '还行',\n                choiceOptionD: '一般',\n                score: 2,\n                answer: 'A',\n            }, {\n                id: '5',\n                problemType: 'multiple',\n                problemText: '你的爱好有什么',\n                multipleOptionA: '吃饭',\n                multipleOptionB: '睡觉',\n                multipleOptionC: '上厕所',\n                multipleOptionD: '打游戏',\n                multipleOptionE: '出去玩',\n                multipleOptionF: '',\n                score: 5,\n                answer: 'A,B',\n            }, {\n                id: '2',\n                problemType: 'judgement',\n                problemText: '你是世界上最聪明的是吗？',\n                score: 4,\n                answer: 'true',\n            },{\n                id: '3',\n                problemType: 'blank',\n                problemText: '计算机网络是一门很有意思的课程，最有意思的部分是____和_____。',\n                score: 3,\n                answer: '优秀、聪明',\n            },{\n                id: '4',\n                problemType: 'shortAnswer',\n                problemText: '你为什么感觉到幸福呢',\n                score: 6,\n                answer: '因为年年有今日，岁岁有今朝',\n            }],\n            testPaperDetails: {\n                testPaperName: '今日颜值测试考试',\n                subject:'语文',\n                startTime: '2020-01-13 21:00:00',\n                endTime: '2020-01-13 21:00:00',\n            },\n            modalFormDate: {},\n        }\n    }\n    getTestPaPaerColumns = () => {\n        return [{\n            title: '试卷名称',\n            dataIndex: 'testPaperName',\n            key: 'testPaperName',\n        },{\n            title: '所属课程',\n            dataIndex: 'subject',\n            key: 'subject',\n        },  {\n            title: '开始时间',\n            dataIndex: 'startTime',\n            key: 'startTime',\n        }, {\n            title: '结束时间',\n            dataIndex: 'endTime',\n            key: 'endTime',\n        }]\n    }\n    getResultColumns = () => {\n        return [\n            {\n                title: '适应度',\n                dataIndex: 'fitness',\n                key: 'fitness',\n            }, {\n                title: '试卷难度系数',\n                dataIndex: 'difficulty',\n                key: 'difficulty',\n            }, {\n                title: '知识点覆盖率',\n                dataIndex: 'pointCoverage',\n                key: 'pointCoverage',\n            }, {\n                title: '题目总数',\n                dataIndex: 'problemNum',\n                key: 'problemNum',\n            }, {\n                title: '试卷总分',\n                dataIndex: 'score',\n                key: 'score',\n            }\n        ]\n    }\n\n    onChangeItem = (filed, val) => {\n        console.log('正确答案不允许修改');\n        return;\n    }\n\n    // 修改试卷\n    onModifyTestPaper = (record) => {\n        let tempRecord = record;\n        tempRecord.startTime = moment(record.startTime,'YYYY-MM-DD HH:mm:ss');\n        tempRecord.endTime = moment(record.endTime,'YYYY-MM-DD HH:mm:ss');\n        confirm({\n            title: '修改试卷信息',\n            icon: <ExclamationCircleOutlined />,\n            content: (\n                <Form\n                    {...layout}\n                    name=\"basic\"\n                    layout=\"Horizontal\"\n                    initialValues={tempRecord}\n                >\n                    <Form.Item\n                        label=\"试卷名称\"\n                        name=\"testPaperName\"\n                    >\n                        <Input\n                            placeholder=\"请输入试卷名称\"\n                            value={tempRecord.testPaperName}\n                            onChange={ (e) => { this.handleChangeModalItem('testPaperName', e)}}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"开始时间\"\n                        name=\"startTime\"\n                    >\n                        <DatePicker\n                            showTime\n                            format=\"YYYY-MM-DD HH:mm:ss\"\n                            value={tempRecord.startTime}\n                            locale={locale}\n                            onChange={ (time, timeString) => { this.handleChangeModalItem('startTime', timeString)}}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"结束时间\"\n                        name=\"endTime\"\n                    >\n                        <DatePicker\n                            showTime\n                            format=\"YYYY-MM-DD HH:mm:ss\"\n                            value={tempRecord.endTime}\n                            locale={locale}\n                            onChange={ (time, timeString) => { this.handleChangeModalItem('endTime', timeString)}}\n                        />\n                    </Form.Item>\n                </Form>\n            ),\n            style: { marginTop: 150 },\n            okText: '保存',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => {\n                this.onOkModify(record);\n            },\n            onCancel: () => {\n                console.log('不保存')\n            },\n        })\n    }\n\n    // 修改试卷内容字段\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { modalFormDate } = this.state;\n        const tempModalFormDate = Object.assign({}, modalFormDate, { [filedName]: value });\n        this.setState({\n            modalFormDate: tempModalFormDate,\n        });\n    }\n    \n    // 确认修改\n    onOkModify = (record) => {\n        const { modalFormDate } = this.state;\n        // 请求返回之后，modalFormDate清空\n        console.log(modalFormDate);\n    }\n\n    render() {\n        const { data, problemList, testPaperDetails } = this.state;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试题管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试卷详情</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background test-paper-details\"\n                    >\n                        <Alert message=\"组卷结果请及时保存，若直接退出则不会保存组卷结果。\" type=\"warning\" showIcon closable />\n                        <Card\n                            style={{ marginTop: 20}}\n                            title=\"组卷结果\"\n                            extra={\n                                <Button\n                                    type=\"primary\"\n                            >\n                                保存试卷\n                            </Button>\n                            }\n                        >\n                                <Table\n                                    columns={this.getResultColumns()}\n                                    dataSource={data}\n                                    pagination={false}\n                                />\n                        </Card>\n                        <Card\n                            title=\"试卷信息\"\n                            style={{ marginTop: 20}}\n                            extra={\n                            <Space size={50}>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() => this.onModifyTestPaper(testPaperDetails)}\n                                >\n                                    修改试卷信息\n                                </Button>\n                            </Space>\n                        }>\n                                <Table\n                                    columns={this.getTestPaPaerColumns()}\n                                    dataSource={[testPaperDetails]}\n                                    pagination={false}\n                                />\n                        </Card>\n                        <Alert\n                            style={{ marginTop: 10 }}\n                            message=\"题目信息仅为展示，不可修改。若要修改，请前往题目管理，进行修改。\"\n                            type=\"warning\"\n                            showIcon\n                            closable\n                        />\n                        <Card\n                            title=\"题目信息\"\n                            style={{ marginTop: 10}}\n                                \n                        >\n                            <Form>\n                                {\n                                    problemList.map(item => {\n                                        return(\n                                            <Form.Item\n                                                label=\"\"\n                                                name={item.answer}\n                                                key={item.id}\n                                            >\n                                                {item.id}.{item.problemText} ({item.score}分)\n                                                <RenderProblem\n                                                    field={item}\n                                                    onChangeItem={this.onChangeItem}\n                                                />\n                                            </Form.Item>\n                                        )\n                                    })\n                                }\n                            </Form>\n                        </Card>\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\nexport default WrappedComponent(app);","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\points\\points.jsx",["151","152"],"import React, { Component } from 'react'\nimport {\n    Table,\n    Form,\n    Space,\n    Breadcrumb,\n    Layout,\n    Select,\n    Input,\n    Button,\n    Card,\n    Modal,\n    Pagination,\n    message,\n} from 'antd';\nimport './index.scss';\nimport { connect } from 'react-redux'; \nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport points from '../../../../store/actions/points';\nimport subjects from '../../../../store/actions/subjects';\nimport WrappedComponent from '../component/wrapComponent';\nconst { Content } = Layout;\nconst { Option } = Select;\nconst { confirm } = Modal;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 14 },\n};\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {\n                subjectId: '',\n                pointName: '',\n            },\n            modalFormDate: {},\n            check: {},\n            pageSize: 10,\n            currentPage: 1,\n            userId: window.localStorage.getItem('userId'),\n            type: window.localStorage.getItem('type'),\n        }\n    }\n\n    componentDidMount(){\n        const { getPoints, getSubjects } = this.props;\n        const { pageSize, currentPage } = this.state;\n        getPoints({pageSize, currentPage, userId: window.localStorage.getItem('userId')});\n        getSubjects();\n    }\n\n    getColumns = () => {\n        return [\n            {\n                title: '知识点ID',\n                dataIndex: 'pointId',\n                key: 'pointId',\n            },\n            {\n                title: '知识点名称',\n                dataIndex: 'pointName',\n                key: 'pointName',\n            },\n            {\n                title: '知识点所属课程',\n                dataIndex: 'subjectName',\n                key: 'subjectName',\n            },\n            {\n                title: '知识点所属章节',\n                dataIndex: 'chapter',\n                key: 'chapter',\n            },\n            {\n                title: '操作',\n                key: '',\n                render: (text, record) => {\n                    const { userId, type } = this.state;\n                    return (\n                        <Space size=\"middle\">\n                            {\n                               (+userId === record.userId || type === '1')  ?\n                                <>\n                                    <a onClick={ () => { this.pointManageModal('modify', record)}}>修改</a>\n                                    <a onClick={() => {this.onDelPoint(record.pointId, record.pointName)}}>删除</a>\n                                </>\n                                : '无'\n                            }\n                        </Space>\n                    )\n                } \n              },\n          ];\n          \n    }\n    \n    handleChangeItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { formData } = this.state;\n        const tempFormDate = Object.assign({}, formData, { [filedName]: value });\n        this.setState({\n            formData: tempFormDate,\n        });\n    }\n\n\n    onSubmit = () => {\n        const { currentPage, pageSize, formData } = this.state;\n        const { getPoints } = this.props;\n        getPoints({...formData,currentPage, pageSize, userId: window.localStorage.getItem('userId')});\n    }\n\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { modalFormDate } = this.state;\n        const tempModalFormDate = Object.assign({}, modalFormDate, { [filedName]: value });\n        this.setState({\n            modalFormDate: tempModalFormDate,\n        });\n    }\n\n    // 确认添加或修改\n    onOkModify = (type, record) => {\n        const { modalFormDate, currentPage, pageSize } = this.state;\n        //TODO: 可以返回record，使用id回显\n        if(type === 'add') {\n            if(!Object.keys(modalFormDate).length || modalFormDate.pointName === '') {\n                message.error({\n                    content: '未添加，不得保存',\n                    className: 'custom-class',\n                    style: {marginTop: '30vh'},\n                });\n            } else {\n                const { addPoint, getPoints } = this.props;\n                const tempParams = Object.assign({}, modalFormDate, { userId: window.localStorage.getItem('userId')});\n                addPoint(tempParams);\n                setTimeout(() => {\n                    const { pointAddSuccess } = this.props;\n                    if (pointAddSuccess) {\n                        const { modalFormDate } = this.state;\n                        const tempFormData = modalFormDate;\n                        tempFormData.pointName = '';\n                        tempFormData.subjectId = '';\n                        this.setState({\n                            modalFormDate: tempFormData,\n                        }, getPoints({pageSize, currentPage, userId: window.localStorage.getItem('userId')}));\n                    }\n                }, 500); \n            }\n        }\n        if( type === 'modify'){\n            // if(!Object.keys(modalFormDate).length || modalFormDate.pointName === '' || modalFormDate.chapter === '') {\n            //     message.error({\n            //         content: '未修改，不得保存',\n            //         className: 'custom-class',\n            //         style: {marginTop: '30vh'},\n            //     });\n            // } else {\n                const tempModalFormDate = Object.assign({}, record, modalFormDate);\n                console.log(\"填写数据\",modalFormDate);\n                console.log(\"原始数据\",record);\n                console.log(\"合成数据\",tempModalFormDate);\n                const { updatePoint, getPoints } = this.props;\n                updatePoint(tempModalFormDate);\n                setTimeout(() => {\n                    const { pointUpdateSuccess } = this.props;\n                    if (pointUpdateSuccess) {\n                        const { modalFormDate } = this.state;\n                        const tempFormData = modalFormDate;\n                        tempFormData.pointName = '';\n                        tempFormData.subjectId = '';\n                        this.setState({\n                            modalFormDate: tempFormData,\n                        }, getPoints({pageSize, currentPage, userId: window.localStorage.getItem('userId')}));\n                    }\n                }, 500);\n            // }\n        }\n    }\n\n    // 添加或修改弹窗\n    pointManageModal = (type, record) => {\n        console.log(record);\n        const { modalFormDate } = this.state;\n        const { subjectsList } = this.props;\n        return (\n            confirm({\n                title: type === 'modify' ? '修改知识点' : '增加知识点',\n                icon: <ExclamationCircleOutlined />,\n                content: (\n                    <Form\n                        {...layout}\n                        name=\"basic\"\n                        layout=\"Horizontal\"\n                        initialValues={record}\n                    >\n                        <Form.Item\n                            label=\"知识点所属课程\"\n                            name=\"subjectName\"\n                        >\n                            <Select\n                                placeholder=\"请选择课程\"\n                                value={modalFormDate.subjectName}\n                                onChange={(e) => { this.handleChangeModalItem('subjectId', this.handleSelectPointId(e))}}\n                            >\n                                {\n                                    subjectsList.map(item => (\n                                        <Option value={item.subjectName}>{item.subjectName}</Option>\n                                    ))\n                                }\n                            </Select>\n                        </Form.Item>\n                        <Form.Item\n                            label=\"所属章节\"\n                            name=\"chapter\"\n                        >\n                            <Select\n                                placeholder=\"请选择所属章节\"\n                                value={modalFormDate.chapter}\n                                onChange={ (e) => { this.handleChangeModalItem('chapter', e)}}\n                            >\n                                <Option value={\"第一章\"}>第一章</Option>\n                                <Option value={\"第二章\"}>第二章</Option>\n                                <Option value={\"第三章\"}>第三章</Option>\n                                <Option value={\"第四章\"}>第四章</Option>\n                                <Option value={\"第五章\"}>第五章</Option>\n                                <Option value={\"第六章\"}>第六章</Option>\n                                <Option value={\"第七章\"}>第七章</Option>\n                                <Option value={\"第八章\"}>第八章</Option>\n                                <Option value={\"第九章\"}>第九章</Option>\n                                <Option value={\"第十章\"}>第十章</Option>\n                                <Option value={\"第十一章\"}>第十一章</Option>\n                                <Option value={\"第十二章\"}>第十二章</Option>\n                                <Option value={\"第十三章\"}>第十三章</Option>\n                                <Option value={\"第十四章\"}>第十四章</Option>\n                                <Option value={\"第十五章\"}>第十五章</Option>\n                                <Option value={\"第十六章\"}>第十六章</Option>\n                                <Option value={\"第十七章\"}>第十七章</Option>\n                                <Option value={\"第十八章\"}>第十八章</Option>\n                                <Option value={\"第十九章\"}>第十九章</Option>\n                                <Option value={\"第二十章\"}>第二十章</Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item\n                            label=\"知识点名称\"\n                            name=\"pointName\"\n                        >\n                            <Input\n                                placeholder=\"请输入知识点名称\"\n                                value={modalFormDate.pointName}\n                                onChange={ (e) => { this.handleChangeModalItem('pointName', e.target.value)}}\n                            />\n                        </Form.Item>\n                    </Form>\n                ),\n                style: { marginTop: 150 },\n                okText: '保存',\n                okType: 'danger',\n                cancelText: '取消',\n                onOk: () => {\n                    this.onOkModify(type, record);\n                },\n                onCancel: () => {\n                    console.log('不保存')\n                },\n            })      \n        )\n    }\n\n    // 根据知识点名称匹配知识点id\n    handleSelectPointId = (name) => {\n        const { subjectsList } = this.props;\n        console.log(subjectsList);\n        let id = \"\";\n        subjectsList.forEach(item => {\n            if(item.subjectName === name){\n                id = item.subjectId;\n            }\n        });\n        return id;\n    }\n\n    // 删除知识点\n    onDelPoint = (id, name) => {\n        confirm({\n            title: '系统提示',\n            icon: <ExclamationCircleOutlined />,\n            content: `确定要知识点${name}吗？`,\n            style: { marginTop: 150 },\n            okText: '确认',\n            cancelText: '取消',\n            onOk: () => {\n                const { dropPoint, getPoints } = this.props;\n                const { currentPage, pageSize } = this.state;\n                dropPoint({ pointId: id });\n                getPoints({ currentPage, pageSize, userId: window.localStorage.getItem('userId') });\n            },\n            onCancel: () => {\n                console.log('Cancel');\n            },\n        });\n    }\n\n    onChangePage = (page, pageSize) => {\n        this.setState({\n            currentPage: page,\n            pageSize,\n        }, () => {\n            const { getPoints } = this.props;\n            const { currentPage, pageSize } = this.state;\n            getPoints({currentPage, pageSize, userId: window.localStorage.getItem('userId')});\n        });\n    }\n\n    render() {\n        const { formData, modalFormDate, currentPage, pageSize } = this.state;\n        const { pointsList, totalPointsCount, subjectsList } = this.props;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>试题管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>知识点管理</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Form\n                            name=\"basic\"\n                            layout=\"inline\"\n                        >\n                            <Form.Item\n                                label=\"课程\"\n                                name=\"subjectId\"\n                            >\n                                <Select\n                                    style={{ width: 180 }}\n                                    placeholder=\"请选择学科\"\n                                    value={formData.subjectName}\n                                    onChange={(e) => { this.handleChangeItem('subjectId', e)}}\n                                >\n                                    {\n                                        subjectsList.map(item => (\n                                            <Option value={item.subjectId} key={item.subjectId}>\n                                                {item.subjectName}\n                                            </Option>\n                                        ))\n                                    }\n                                </Select>\n                            </Form.Item>\n                            <Form.Item\n                                label=\"知识点\"\n                                name=\"pointName\"\n                            >\n                                <Input\n                                    style={{ width: 180 }}\n                                    placeholder=\"请输入知识点名称\"\n                                    value={formData.pointName}\n                                    onChange={(e) => { this.handleChangeItem('pointName', e.target.value)}}\n                                />\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\" onClick={this.onSubmit}>\n                                    查询\n                                </Button>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={ () => { this.pointManageModal('add', modalFormDate)}}\n                                >\n                                    添加知识点\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    \n                        <Table\n                            style={{ marginTop: 20 }}\n                            bordered\n                            columns={this.getColumns()}\n                            dataSource={pointsList}\n                            hideOnSinglePage={true}\n                            pagination={false}\n                        />\n                        <Pagination\n                            style={{ float: 'right', marginTop: 20}}\n                            showQuickJumper\n                            showSizeChanger={true}\n                            current={currentPage}\n                            total={totalPointsCount}\n                            pageSize={pageSize}\n                            onChange={this.onChangePage}\n                        />\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    pointsList: state.points.pointsList,\n    totalPointsCount: state.points.totalPointsCount,\n    subjectsList: state.subjects.subjectsList,\n    pointUpdateSuccess: state.points.pointUpdateSuccess,\n    pointAddSuccess: state.points.pointAddSuccess,\n});\nconst mapDispatchToProps = (dispatch) => ({\n    getSubjects: params => dispatch(subjects.getSubjects(params)),\n    getPoints: (params) => dispatch(points.getPoints(params)),\n    addPoint: (params) => dispatch(points.addPoint(params)),\n    updatePoint: (params) => dispatch(points.updatePoint(params)),\n    dropPoint: (params) => dispatch(points.dropPoint(params)),\n});\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userPerson.jsx",["153","154"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Table,\n    Form,\n    Space,\n    Breadcrumb,\n    Layout,\n    Tag,\n    Input,\n    Button,\n    Card,\n    message,\n    Alert,\n} from 'antd';\nimport user from '../../../../store/actions/user';\nimport WrappedComponent from '../component/wrapComponent';\nconst { Content } = Layout;\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            usernameDisabled: true,\n            passwordDisabled: true,\n        }\n    }\n\n    formRef = React.createRef();\n\n    onFinish = (values) => {\n        console.log('Success:', values);\n        const { passwordDisabled } = this.state;\n        if(!passwordDisabled && (values.againPassword !== values.passWord)){\n            message.error({\n                content: '输入密码不一致，请重新输入',\n                className: 'custom-class',\n                style: {marginTop: '30vh'},\n            });\n            values = \"\";\n        }\n        this.savePersonChange(values);\n      };\n    \n    onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    // 保存修改\n    savePersonChange = (values) => {\n        const { modifyUser } = this.props;\n        console.log(\"values,|||\", values);\n        if (values) {\n            modifyUser({...values, id: window.localStorage.getItem('userId')});\n            setTimeout( () => {\n                const { userModifySuccess } = this.props;\n                if(userModifySuccess) {\n                    this.setState({\n                        usernameDisabled: true,\n                        passwordDisabled: true,\n                    })\n                }\n                window.localStorage.removeItem('username');\n                window.localStorage.removeItem('userId');\n                window.localStorage.removeItem('type');\n                this.props.history.push('/login');\n            }, 500);\n        }\n    }\n\n    // 取消保存\n    cancalSavePersonChange = () => {\n        this.formRef.current.resetFields();\n        this.setState({\n            usernameDisabled: true,\n            passwordDisabled: true,\n        })\n    }\n\n    render() {\n        const { usernameDisabled, passwordDisabled } = this.state;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card\n                    title={\n                        <Breadcrumb style={{ margin: '16px 0' }}>\n                            <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                            <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                            <Breadcrumb.Item>账号管理</Breadcrumb.Item>\n                            <Breadcrumb.Item>用户管理</Breadcrumb.Item>\n                        </Breadcrumb>\n                    }\n                >\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Card\n                            style={{ width: '80%' }}\n                            title=\"修改个人信息\"\n                            extra={\n                                <Space>\n                                    <Button\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                usernameDisabled: false,\n                                            });\n                                        }}\n                                    >\n                                        修改用户名\n                                    </Button>\n                                    <Button\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                passwordDisabled: false,\n                                            });\n                                        }}\n                                    >\n                                        修改密码\n                                    </Button>\n                                </Space>\n                            }\n                        >\n                            <Alert\n                                message=\"注意修改个人信息之后，会退出系统需重新登录\"\n                                type=\"warning\"\n                                showIcon\n                                closable\n                            />\n                            <Form\n                                {...layout}\n                                name=\"basic\"\n                                layout=\"Vertical\"\n                                style={{ width: '70%', marginTop: 40 }}\n                                className=\"person-form\"\n                                onFinish={this.onFinish}\n                                onFinishFailed={this.onFinishFailed}\n                                ref={this.formRef}\n                            >\n                                <Form.Item\n                                    label=\"用户名\"\n                                    name=\"userName\"\n                                    rules={[{ required: !this.state.usernameDisabled, message: '请输入新用户名' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入新用户名\"\n                                        defaultValue={window.localStorage.getItem('username')}\n                                        disabled={usernameDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"密码\"\n                                    name=\"passWord\"\n                                    rules={[{ required: !this.state.passwordDisabled, message: '请输入新密码' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入新密码\"\n                                        disabled={passwordDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"确认密码\"\n                                    name=\"againPassword\"\n                                    rules={[{ required: !this.state.passwordDisabled, message: '请再次输入新密码' }]}\n                                >\n                                    <Input\n                                        placeholder=\"请再次输入新密码\"\n                                        disabled={passwordDisabled}\n                                    />\n                                </Form.Item>\n                                <Form.Item wrapperCol={{ offset: 8 }}>\n                                    <Space size={50}>\n                                        <Button\n                                            disabled={usernameDisabled && passwordDisabled}\n                                            onClick={() => { this.cancalSavePersonChange()}}\n                                        >\n                                            取消\n                                        </Button>\n                                        <Button\n                                            type=\"primary\"\n                                            htmlType=\"submit\"\n                                            onClick={ () => { this.savePersonChange()}}\n                                            disabled={usernameDisabled && passwordDisabled}\n                                        >\n                                            保存\n                                        </Button>\n                                    </Space>\n                                </Form.Item>\n                            </Form>\n                        </Card>\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return ({\n        userModifySuccess: state.users.userModifySuccess,\n    })\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    modifyUser: params => dispatch(user.modifyUser(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\user\\userManage.jsx",["155","156"],"import React, { Component } from 'react';\nimport {\n    Table,\n    Form,\n    Space,\n    Breadcrumb,\n    Layout,\n    Tag,\n    Input,\n    Button,\n    Card,\n    Modal,\n    Pagination,\n} from 'antd';\nimport { connect } from 'react-redux';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport WrappedComponent from '../component/wrapComponent';\nimport user from '../../../../store/actions/user';\nimport $ajax from '../../../../utils/ajax';\nimport APIS from '../../../../constants/api';\nconst { Content } = Layout;\nconst { confirm } = Modal;\n\nclass app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {},\n            modalFormDate: {},\n            pageSize: 10,\n            pageNum: 1,\n            totalCount: 100,\n            tableData: [],\n        }\n    }\n\n    // 删除用户\n    // onDelUser = (id) => {\n    //     confirm({\n    //         title: '系统提示',\n    //         icon: <ExclamationCircleOutlined />,\n    //         content: `确定要删除用户${id}吗？`,\n    //         style: { marginTop: 150 },\n    //         okText: '确认',\n    //         okType: 'danger',\n    //         cancelText: '取消',\n    //         onOk() {\n    //           console.log('OK');\n    //         },\n    //         onCancel() {\n    //           console.log('Cancel');\n    //         },\n    //       });\n    // }\n\n    // 禁用或启用用户\n    onDisableUser = (id, auth) => {\n        confirm({\n            title: '系统提示',\n            icon: <ExclamationCircleOutlined />,\n            content:`注意禁用后用户将不能再登录系统，启用后可继续使用确定要${auth ? '启用' : '禁用'}用户${id}吗？`,\n            style: { marginTop: 150 },\n            okText: '确认',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => {\n                // 确认之后，直接返回登录页\n                const { forbidUser } = this.props;\n                forbidUser({id, status: +(!auth)});\n                setTimeout( () => {\n                    const { userForbidSuccess } = this.props;\n                    if (userForbidSuccess) {\n                        this.handleGetUserList();\n                    }\n                }, 500);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n          });\n    }\n    getColumns = () => {\n        return [\n            {\n                title: 'ID',\n                dataIndex: 'id',\n                key: 'id',\n            },\n            {\n                title: '用户名',\n                dataIndex: 'userName',\n                key: 'userName',\n            },\n            {\n                title: '身份类型',\n                dataIndex: 'type',\n                key: 'type',\n                render: (text, record) => (\n                    <Tag color={record.type ?'volcano': 'cyan'}>{record.type ? '管理员': '用户'}</Tag>\n                )\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'createTime',\n                key: 'createTime',\n            },\n            {\n                title: '最后一次登录时间',\n                dataIndex: 'lastLogTime',\n                key: 'lastLogTime',\n            },\n            {\n                title: '操作',\n                key: '',\n                render: (text, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={ () => { this.userManageModal('modify', record)}}>修改用户信息</a>\n                        {/* <a onClick={() => {this.onDelUser(record.id)}}>删除</a> */}\n                        <a onClick={() => {this.onDisableUser(record.id, record.status)}}>\n                            {\n                                record.status ?\n                                '启用' :\n                                '禁用' \n                            }\n                        </a>\n                    </Space>\n                ),\n              },\n          ];\n    }\n\n    componentDidMount(){\n        this.handleGetUserList();\n    }\n\n    handleGetUserList = () => {\n        const { pageSize, pageNum } = this.state;\n        const params = {\n            pageSize,\n            currentPage: pageNum,\n        };\n        $ajax.common({\n            method: 'get',\n            api: APIS.getUserList,\n            params,\n            contentType: 'json',\n        }).then(res => {\n            if (res.code === 10000 && res.success === true) { \n                const { currentPage, totalCount, dataList, size } = res.data;\n                this.setState({\n                    pageSize: size,\n                    pageNum: currentPage,\n                    totalCount: totalCount,\n                    tableData: dataList,\n                })\n            }\n        }).catch(err => {\n            console.log('err------',err);\n        })\n    }\n\n    onChangePage = (page, pageSize) => {\n        this.setState({\n            currentPage: page,\n            pageSize,\n        }, this.handleGetUserList);\n    }\n\n    handleChangeItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { formData } = this.state;\n        const tempFormDate = Object.assign({}, formData, { [filedName]: value });\n        this.setState({\n            formData: tempFormDate,\n        });\n    }\n\n\n    onSubmit = () => {\n        console.log('submit提交表单',this.state.formData);\n    }\n\n\n    handleChangeModalItem = (filedName, value) => {\n        console.log('filedName, value', filedName, value)\n        const { modalFormDate } = this.state;\n        const tempModalFormDate = Object.assign({}, modalFormDate, { [filedName]: value });\n        this.setState({\n            modalFormDate: tempModalFormDate,\n        });\n    }\n    // 确认添加或修改\n    onOkModify = (type, record) => {\n        const { modalFormDate } = this.state;\n        const { addUser, updateUser} = this.props;\n        if(type === 'add') {\n            console.log('新增数据', type, modalFormDate);\n            addUser(modalFormDate);\n            setTimeout( () => {\n                // 请求返回之后，modalFormDate清空\n                const { userAddSuccess } = this.props;\n                if (userAddSuccess) {\n                    const tempFormData = modalFormDate;\n                    tempFormData.userName = '';\n                    tempFormData.passWord = '';\n                    this.setState({\n                        modalFormDate: tempFormData,\n                    }, () => {\n                        this.handleGetUserList();\n                    });\n                }\n            }, 500);\n        }\n        if( type === 'modify'){\n            const tempModalFormDate = Object.assign({}, record, modalFormDate,);\n            console.log('修改数据',type,tempModalFormDate);\n            // 请求返回之后，modalFormDate清空\n            updateUser(tempModalFormDate);\n            setTimeout(() => {\n                const { userUpdateSuccess } = this.props;\n                if (userUpdateSuccess) {\n                    const tempFormData = tempModalFormDate;\n                    tempFormData.userName = '';\n                    tempFormData.passWord = '';\n                    this.setState({\n                        modalFormDate: tempFormData,\n                    }, () => {\n                        this.handleGetUserList();\n                    });\n                }\n            }, 500);\n        }\n    }\n\n    // 添加或修改弹窗\n    userManageModal = (type, record) => {\n        const { modalFormDate } = this.state;\n        return (\n            confirm({\n                title: type === 'modify' ? '修改用户信息' : '增加用户',\n                icon: <ExclamationCircleOutlined />,\n                content: (\n                    <Form\n                        name=\"basic\"\n                        layout=\"Horizontal\"\n                        initialValues={record}\n                    >\n                        <Form.Item\n                            label={type === 'add' ? \"初始用户名\": \"修改用户名\"}\n                            name=\"userName\"\n                        >\n                            <Input\n                                placeholder=\"请输入用户名\"\n                                value={modalFormDate.userName}\n                                onChange={ (e) => { this.handleChangeModalItem('userName', e.target.value)}}\n                            />\n                        </Form.Item>\n                        <Form.Item\n                            label={type === 'add' ? \"初始密码\": \"重置密码\"}\n                            name=\"passWord\"\n                        >\n                            <Input\n                                placeholder=\"请输入密码\"\n                                value={modalFormDate.passWord}\n                                onChange={ (e) => { this.handleChangeModalItem('passWord', e.target.value)}}\n                            />\n                        </Form.Item>\n                    </Form>\n                ),\n                style: { marginTop: 150 },\n                okText: '保存',\n                okType: 'danger',\n                cancelText: '取消',\n                onOk: () => {\n                    this.onOkModify(type, record);\n                },\n                onCancel: () => {\n                    console.log('不保存')\n                },\n            })      \n        )\n    }\n\n    render() {\n        const { modalFormDate, pageSize, pageNum, totalCount, tableData } = this.state;\n        return (\n            <div style={{ padding: 10 }}>\n                <Card title={\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>自动组卷系统</Breadcrumb.Item>\n                        <Breadcrumb.Item>后台管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>账号管理</Breadcrumb.Item>\n                        <Breadcrumb.Item>用户管理</Breadcrumb.Item>\n                    </Breadcrumb>\n                }>\n                    <Content\n                        className=\"site-layout-background\"\n                    >\n                        <Form\n                            name=\"basic\"\n                            layout=\"inline\"\n                        >\n                            <Form.Item\n                                label=\"用户名\"\n                                name=\"userName\"\n                            >\n                                <Input\n                                    placeholder=\"请输入用户名\"\n                                    value={modalFormDate.userName}\n                                    onChange={ (e) => { this.handleChangeModalItem('userName', e)}}\n                                />\n                            </Form.Item>\n                            <Form.Item>\n                                <Button type=\"primary\" onClick={this.onSubmit}>\n                                    查询\n                                </Button>\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={ () => { this.userManageModal('add', modalFormDate)}}\n                                >\n                                    添加用户\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    \n                        <Table\n                            style={{ marginTop: 20 }}\n                            bordered\n                            columns={this.getColumns()}\n                            dataSource={tableData}\n                            pagination={false}\n                        />\n                        <Pagination\n                            style={{ float: 'right', marginTop: 20}}\n                            showQuickJumper\n                            current={pageNum}\n                            total={totalCount}\n                            pageSize={pageSize}\n                            onChange={this.onChangePage}\n                        />\n                    </Content>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return ({\n        userAddSuccess: state.users.userAddSuccess,\n        userUpdateSuccess: state.users.userUpdateSuccess,\n        userForbidSuccess: state.users.userForbidSuccess,\n    })\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    addUser: params => dispatch(user.addUser(params)),\n    updateUser: params => dispatch(user.updateUser(params)),\n    forbidUser: params => dispatch(user.forbidUser(params)),\n})\n\nexport default WrappedComponent(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(app));","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemManage.jsx",["157","158"],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\testPaper\\testPaperAutomatic.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\constants\\api.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\utils\\ajax.js",["159"],"import axios from 'axios';\nimport { message } from 'antd';\naxios.defaults.withCredentials = true;\naxios.interceptors.request.use((config) => {\n    // if (config.headers['Content-Type'] !== 'application/json') {\n    //     config.data = JSON.stringify(config.data);\n    // }\n    return config;\n}, error => Promise.reject(error));\n\nconst contentTypeMap = {\n    json: 'application/json',\n    form: 'application/x-www-form-urlencoded',\n    file: 'multipart/form-data',\n};\n\nexport function ajax({\n    method = 'get',\n    api,\n    params,\n    contentType = 'form',\n}) {\n    const headers = {\n        'Content-Type': contentTypeMap[contentType] || 'application/x-www-form-urlencoded',\n    };\n\n    let config;\n    let callerFunc;\n    if (method === 'post') {\n        config = {\n            headers,\n        };\n        callerFunc = axios.post;\n    } else if (method === 'get') {\n        params = {\n            params,\n            headers,\n        };\n        callerFunc = axios.get;\n    } else {\n        callerFunc = () => {\n            throw new Error(`当前方法${method}暂不支持`);\n        };\n    }\n    return callerFunc(api, params, config).then((response) => {\n        const { status, data } = response;\n\n        if (status === 200) {\n            const res = data;\n            if (typeof res === 'string') {\n                message.error('返回值解析错误');\n            } else {\n                return res;\n            }\n        } else {\n            message.error('网络请求失败');\n        }\n        return undefined;\n    }).catch((e) => {\n        console.log(e);\n    });\n}\n\nexport function ajaxFile({ api, params }) {\n    const formData = new FormData();\n    formData.append('file', params.file);\n    const config = {\n        method: 'post',\n        body: formData,\n    };\n    return fetch(api, config).then(response => response.json());\n}\n\nexport const pure = axios;\n\nexport default {\n    common: ajax,\n    ajaxFile,\n};\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\problem\\problemSearch.jsx",["160"],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\wrapComponent.jsx",["161","162"],"import React, { Component } from 'react'\nimport { Layout } from 'antd';\nimport Nav from '../../nav';\nimport Head from '../../header';\nconst { Header, Sider } = Layout;\n\nexport default (WrappedComponent) => {\n    return class extends Component {\n        constructor(props){\n            super(props);\n        }\n        render() {\n            return (\n                <Layout>\n                    <Header style={{ paddingLeft: 10, paddingRight: 10, height: 70 }}>\n                        <Head />\n                    </Header>\n                    <Layout>\n                        <Sider width={200} style={{ backgroundColor: '#fff'}}>\n                            <Nav />\n                        </Sider>\n                        <Layout>\n                            <WrappedComponent {...this.props}/>\n                        </Layout>\n                    </Layout>\n                </Layout>\n            );\n        }\n    };\n}\n","F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\BaseForm.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\content\\component\\RenderProblem.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\nav\\index.jsx",[],"F:\\Projects\\React学习\\test_paper_system\\src\\pages\\home\\header\\index.jsx",["163","164","165"],"import React, { Component } from 'react'\nimport { Menu } from 'antd';\nimport { SettingOutlined, LogoutOutlined, LoginOutlined } from '@ant-design/icons';\n\nconst { SubMenu } = Menu;\nexport default class app extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    handleLogOut = () => {\n        window.localStorage.removeItem('userId');\n        window.localStorage.removeItem('username');\n        window.localStorage.removeItem('type');\n        this.props.history.push('/login');\n    }\n\n    render() {\n        const username = window.localStorage.getItem('username');\n        return (\n            <div>\n                <Menu\n                    theme=\"dark\"\n                    mode=\"horizontal\"\n                >    \n                    <Menu.Item>\n                        <img\n                            width={50}\n                            height={50}\n                            src=\"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png?x-oss-process=image/blur,r_50,s_50/quality,q_1/resize,m_mfit,h_200,w_200\"\n                        />\n                    </Menu.Item>\n                    <SubMenu key=\"3\"\n                        icon={<SettingOutlined />}\n                        title={`欢迎你，${username}`}\n                        style={{ float: 'right'}}\n                    >\n                        <Menu.Item\n                            key=\"setting:2\"\n                            onClick={() => { this.handleLogOut()}}\n                        >\n                                退出登录\n                        </Menu.Item>\n                    </SubMenu>\n                </Menu>\n            </div>\n        )\n    }\n}","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\login.js",["166"],"import actionType from '../actionType.js';\nimport APIS from '../../constants/api.js';\nimport $ajax from '../../utils/ajax';\nimport { message } from 'antd';\n\nconst actions = {\n    onLogin: params => dispatch => {\n        const options = {\n            method: 'post',\n            api: APIS.login,\n            params: params.formData,\n            contentType: 'json',\n        };\n        $ajax.common(options).then((res) => {\n            if (res.code === 10000) {\n                message.success(res.message);\n                dispatch({\n                    type: actionType.LOGIN,\n                    username: res.data.userName,\n                    type: res.data.type,\n                });\n                window.localStorage.setItem('userId', res.data.id);\n                window.localStorage.setItem('username', res.data.userName);\n                window.localStorage.setItem('type', res.data.type); \n                params.props.history.push('/home');\n            } else {\n                message.error({\n                    content: res.message,\n                    className: 'custom-class',\n                    style: {marginTop: '30vh'},\n                });\n            }\n            return res;\n        }).catch((e) => {\n            console.log(e);\n        })\n    },\n}\nexport default actions;","F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\points.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\subjects.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\user.js",[],"F:\\Projects\\React学习\\test_paper_system\\src\\store\\actions\\problems.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":1,"column":1,"nodeType":"173","endLine":24,"endColumn":2},{"ruleId":"174","severity":1,"message":"175","line":147,"column":25,"nodeType":"176","endLine":150,"endColumn":27},{"ruleId":"174","severity":1,"message":"175","line":156,"column":25,"nodeType":"176","endLine":159,"endColumn":27},{"ruleId":"177","severity":1,"message":"178","line":91,"column":33,"nodeType":"176","endLine":91,"endColumn":36},{"ruleId":"177","severity":1,"message":"178","line":165,"column":37,"nodeType":"176","endLine":165,"endColumn":114},{"ruleId":"177","severity":1,"message":"178","line":87,"column":37,"nodeType":"176","endLine":87,"endColumn":99},{"ruleId":"177","severity":1,"message":"178","line":88,"column":37,"nodeType":"176","endLine":88,"endColumn":94},{"ruleId":"177","severity":1,"message":"178","line":139,"column":41,"nodeType":"176","endLine":139,"endColumn":93},{"ruleId":"177","severity":1,"message":"178","line":140,"column":41,"nodeType":"176","endLine":140,"endColumn":93},{"ruleId":"179","severity":1,"message":"180","line":12,"column":5,"nodeType":"181","messageId":"182","endLine":12,"endColumn":11},{"ruleId":"177","severity":1,"message":"178","line":86,"column":37,"nodeType":"176","endLine":86,"endColumn":100},{"ruleId":"177","severity":1,"message":"178","line":87,"column":37,"nodeType":"176","endLine":87,"endColumn":108},{"ruleId":"179","severity":1,"message":"183","line":4,"column":5,"nodeType":"181","messageId":"182","endLine":4,"endColumn":10},{"ruleId":"179","severity":1,"message":"184","line":9,"column":5,"nodeType":"181","messageId":"182","endLine":9,"endColumn":8},{"ruleId":"177","severity":1,"message":"178","line":117,"column":25,"nodeType":"176","endLine":117,"endColumn":87},{"ruleId":"177","severity":1,"message":"178","line":119,"column":25,"nodeType":"176","endLine":119,"endColumn":91},{"ruleId":"185","severity":1,"message":"186","line":596,"column":17,"nodeType":"187","messageId":"188","endLine":596,"endColumn":23},{"ruleId":"179","severity":1,"message":"189","line":624,"column":59,"nodeType":"181","messageId":"182","endLine":624,"endColumn":70},{"ruleId":"171","severity":1,"message":"172","line":76,"column":1,"nodeType":"173","endLine":79,"endColumn":3},{"ruleId":"190","severity":1,"message":"191","line":15,"column":5,"nodeType":"192","messageId":"193","endLine":17,"endColumn":6},{"ruleId":"171","severity":1,"message":"194","line":7,"column":1,"nodeType":"173","endLine":30,"endColumn":2},{"ruleId":"190","severity":1,"message":"191","line":9,"column":9,"nodeType":"192","messageId":"193","endLine":11,"endColumn":10},{"ruleId":"179","severity":1,"message":"195","line":3,"column":27,"nodeType":"181","messageId":"182","endLine":3,"endColumn":41},{"ruleId":"179","severity":1,"message":"196","line":3,"column":43,"nodeType":"181","messageId":"182","endLine":3,"endColumn":56},{"ruleId":"174","severity":1,"message":"175","line":30,"column":25,"nodeType":"176","endLine":34,"endColumn":27},{"ruleId":"197","severity":1,"message":"198","line":20,"column":21,"nodeType":"199","messageId":"200","endLine":20,"endColumn":25},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","'Tag' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'isGetPoints' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Assign arrow function to a variable before exporting as module default","'LogoutOutlined' is defined but never used.","'LoginOutlined' is defined but never used.","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation"]